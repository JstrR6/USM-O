<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %> | Military Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body class="bg-gray-100">
    <div class="min-h-screen flex">
        <!-- Sidebar -->
        <div class="bg-gray-800 text-white w-64 flex-shrink-0 flex flex-col">
            <div class="px-6 py-4">
                <h1 class="text-2xl font-semibold">Military Portal</h1>
            </div>
            <!-- Navigation -->
            <nav class="flex-1 px-4 mt-6">
                <a href="/dashboard" class="flex items-center px-4 py-3 text-gray-300 hover:bg-gray-700 rounded-lg <%= path === '/dashboard' ? 'bg-gray-700' : '' %>">
                    <i class="fas fa-home w-5 h-5 mr-3"></i>
                    Dashboard
                </a>
                <a href="/forms" class="flex items-center px-4 py-3 mt-2 text-gray-300 hover:bg-gray-700 rounded-lg <%= path === '/forms' ? 'bg-gray-700' : '' %>">
                    <i class="fas fa-file-alt w-5 h-5 mr-3"></i>
                    Forms
                </a>
                <a href="/profile" class="flex items-center px-4 py-3 mt-2 text-gray-300 hover:bg-gray-700 rounded-lg <%= path === '/profile' ? 'bg-gray-700' : '' %>">
                    <i class="fas fa-user w-5 h-5 mr-3"></i>
                    Profile
                </a>
                <a href="/members" class="flex items-center px-4 py-3 mt-2 text-gray-300 hover:bg-gray-700 rounded-lg <%= path === '/members' ? 'bg-gray-700' : '' %>">
                    <i class="fas fa-users w-5 h-5 mr-3"></i>
                    Members
                </a>
            </nav>
            <!-- User Info -->
            <div class="px-6 py-4 border-t border-gray-700">
                <div class="flex items-center">
                    <div class="ml-3">
                        <p class="text-sm font-medium"><%= currentUser.username %></p>
                        <p class="text-xs text-gray-400"><%= currentUser.highestRole %></p>
                    </div>
                </div>
                <a href="/logout" class="mt-4 block px-4 py-2 text-center text-sm text-white bg-red-600 hover:bg-red-700 rounded-lg">
                    Logout
                </a>
            </div>
        </div>

        <!-- Main Content -->
        <div class="flex-1 flex flex-col">
            <!-- Header -->
            <header class="bg-white shadow-sm">
                <div class="px-6 py-4">
                    <div class="flex items-center justify-between">
                        <h2 class="text-xl font-semibold text-gray-800">Members</h2>
                        <div class="flex items-center">
                            <span class="text-gray-600"><%= new Date().toLocaleDateString() %></span>
                        </div>
                    </div>
                </div>
            </header>

            <!-- Main Content Area -->
            <main class="p-6 flex-1 overflow-auto">
                <!-- Filters -->
                <div class="bg-white rounded-lg shadow-sm p-6 mb-6">
                    <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
                        <!-- Rank Filter -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Rank Filter</label>
                            <select id="rankFilter" class="w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                                <option value="all">All Ranks</option>
                                <option value="enlisted">Enlisted</option>
                                <option value="nco">NCOs</option>
                                <option value="snco">SNCOs</option>
                                <option value="officer">Officers</option>
                            </select>
                        </div>

                        <!-- Sort By -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Sort By</label>
                            <select id="sortBy" class="w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                                <option value="rank">Rank</option>
                                <option value="xp">XP</option>
                                <option value="username">Username</option>
                                <option value="joinDate">Join Date</option>
                            </select>
                        </div>

                        <!-- Sort Direction -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Sort Direction</label>
                            <select id="sortDirection" class="w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                                <option value="desc">Descending</option>
                                <option value="asc">Ascending</option>
                            </select>
                        </div>

                        <!-- Search -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Search</label>
                            <input type="text" id="searchInput" placeholder="Search by username..." class="w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                        </div>
                    </div>
                </div>

                <!-- Members List -->
                <div class="bg-white rounded-lg shadow-sm overflow-hidden">
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Username</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Rank</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">XP</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Join Date</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                </tr>
                            </thead>
                            <tbody id="membersTableBody" class="bg-white divide-y divide-gray-200">
                                <% users.forEach(function(member) { %>
                                <tr class="hover:bg-gray-50">
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="flex items-center">
                                            <div class="flex-shrink-0 h-10 w-10">
                                                <div class="h-10 w-10 rounded-full bg-gray-200 flex items-center justify-center">
                                                    <i class="fas fa-user text-gray-500"></i>
                                                </div>
                                            </div>
                                            <div class="ml-4">
                                                <div class="text-sm font-medium text-gray-900"><%= member.username %></div>
                                            </div>
                                        </div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <span class="px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                                            <%= member.highestRole %>
                                        </span>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500"><%= member.xp || 0 %></td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                        <%= new Date(member.dateJoined).toLocaleDateString() %>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                        <button onclick="viewProfile('<%= member._id %>')" class="text-indigo-600 hover:text-indigo-900">
                                            View Profile
                                        </button>
                                    </td>
                                </tr>
                                <% }); %>
                            </tbody>
                        </table>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <!-- Profile Modal -->
    <div id="profileModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full">
        <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-2/3 shadow-lg rounded-md bg-white">
            <div class="absolute top-0 right-0 pt-4 pr-4">
                <button onclick="closeProfileModal()" class="text-gray-400 hover:text-gray-500">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div id="profileContent" class="mt-3">
                <!-- Profile content will be loaded here -->
            </div>
        </div>
    </div>

    <script>
// Constants for rank categories
const RANKS = {
    enlisted: ['Private', 'Private First Class', 'Specialist'],
    nco: ['Corporal', 'Sergeant', 'Staff Sergeant', 'Sergeant First Class'],
    snco: [ 'Master Sergeant', 'First Sergeant', 'Sergeant Major'],
    officer: ['Second Lieutenant', 'First Lieutenant', 'Captain', 'Major', 'Lieutenant Colonel', 'Colonel']
};

// Initialize everything when the page loads
document.addEventListener('DOMContentLoaded', function() {
    populateRankFilter();
    setupEventListeners();
    initializeModal();
});

// Setup all event listeners
function setupEventListeners() {
    // Filter change events
    document.getElementById('rankFilter').addEventListener('change', filterMembers);
    document.getElementById('sortBy').addEventListener('change', filterMembers);
    document.getElementById('sortDirection').addEventListener('change', filterMembers);
    
    // Search input with debounce
    const searchInput = document.getElementById('searchInput');
    let debounceTimer;
    searchInput.addEventListener('input', () => {
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(filterMembers, 300);
    });

    // Modal close button and outside click
    document.getElementById('profileModal').addEventListener('click', (e) => {
        if (e.target.id === 'profileModal') {
            closeProfileModal();
        }
    });

    // Close modal with Escape key
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
            closeProfileModal();
        }
    });
}

// Populate rank filter dropdown
function populateRankFilter() {
    const rankFilter = document.getElementById('rankFilter');
    
    // Add category options
    const categoryOptions = [
        { value: 'all', label: 'All Ranks' },
        { value: 'enlisted', label: 'Enlisted' },
        { value: 'nco', label: 'NCOs' },
        { value: 'snco', label: 'SNCOs'},
        { value: 'officer', label: 'Officers' }
    ];
    
    categoryOptions.forEach(category => {
        const option = document.createElement('option');
        option.value = category.value;
        option.textContent = category.label;
        rankFilter.appendChild(option);
    });
    
    // Add divider
    const divider = document.createElement('option');
    divider.disabled = true;
    divider.textContent = '──────────';
    rankFilter.appendChild(divider);
    
    // Add individual ranks
    Object.entries(RANKS).forEach(([category, ranks]) => {
        ranks.forEach(rank => {
            const option = document.createElement('option');
            option.value = rank;
            option.textContent = rank;
            rankFilter.appendChild(option);
        });
    });
}

// Filter and sort members
async function filterMembers() {
    const rankFilter = document.getElementById('rankFilter').value;
    const sortBy = document.getElementById('sortBy').value;
    const sortDirection = document.getElementById('sortDirection').value;
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();

    // Show loading state
    const tbody = document.getElementById('membersTableBody');
    tbody.innerHTML = `
        <tr>
            <td colspan="5" class="px-6 py-4 text-center">
                <div class="flex items-center justify-center">
                    <i class="fas fa-spinner fa-spin mr-2"></i>
                    Loading...
                </div>
            </td>
        </tr>
    `;

    try {
        const response = await fetch(
            `/api/members/filter?rank=${encodeURIComponent(rankFilter)}&sort=${encodeURIComponent(sortBy)}&direction=${encodeURIComponent(sortDirection)}&search=${encodeURIComponent(searchTerm)}`
        );
        
        if (!response.ok) throw new Error('Network response was not ok');
        
        const data = await response.json();
        updateMembersTable(data.users);
    } catch (error) {
        console.error('Error:', error);
        tbody.innerHTML = `
            <tr>
                <td colspan="5" class="px-6 py-4 text-center text-red-600">
                    Error loading members. Please try again.
                </td>
            </tr>
        `;
    }
}

// Update the members table with new data
function updateMembersTable(users) {
    const tbody = document.getElementById('membersTableBody');
    
    if (!users || users.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="5" class="px-6 py-4 text-center text-gray-500">
                    No members found matching the current filters.
                </td>
            </tr>
        `;
        return;
    }

    tbody.innerHTML = '';
    users.forEach(member => {
        const tr = document.createElement('tr');
        tr.className = 'hover:bg-gray-50';
        tr.innerHTML = `
            <td class="px-6 py-4 whitespace-nowrap">
                <div class="flex items-center">
                    <div class="flex-shrink-0 h-10 w-10">
                        <div class="h-10 w-10 rounded-full bg-gray-200 flex items-center justify-center">
                            <i class="fas fa-user text-gray-500"></i>
                        </div>
                    </div>
                    <div class="ml-4">
                        <div class="text-sm font-medium text-gray-900">${escapeHtml(member.username)}</div>
                    </div>
                </div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
                <span class="px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                    ${escapeHtml(member.highestRole)}
                </span>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                ${member.xp?.toLocaleString() || '0'}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                ${new Date(member.dateJoined).toLocaleDateString()}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                <button onclick="viewProfile('${member._id}')" class="text-indigo-600 hover:text-indigo-900">
                    View Profile
                </button>
            </td>
        `;
        tbody.appendChild(tr);
    });
}

// Profile viewing functions
async function viewProfile(userId) {
    const modal = document.getElementById('profileModal');
    const content = document.getElementById('profileContent');
    
    // Show loading state
    content.innerHTML = `
        <div class="flex items-center justify-center p-6">
            <i class="fas fa-spinner fa-spin mr-2"></i>
            Loading profile...
        </div>
    `;
    modal.classList.remove('hidden');

    try {
        const response = await fetch(`/api/members/${userId}/profile`);
        if (!response.ok) throw new Error('Network response was not ok');
        
        const data = await response.json();
        content.innerHTML = generateProfileHTML(data);
        
        // Initialize the first tab
        const firstTab = content.querySelector('.profile-tab-btn');
        if (firstTab) firstTab.click();
    } catch (error) {
        console.error('Error:', error);
        content.innerHTML = `
            <div class="p-6 text-center text-red-600">
                Error loading profile. Please try again.
            </div>
        `;
    }
}

// Generate HTML for profile modal
function generateProfileHTML(data) {
    // Combine all events for the recent activity section
    const allEvents = [
        ...data.trainings.map(t => ({
            date: new Date(t.createdAt),
            type: 'Training',
            description: `${t.instructor._id === data._id ? 'Instructed' : 'Completed'} ${t.type}`,
            status: t.status
        })),
        ...data.promotions.map(p => ({
            date: new Date(p.createdAt),
            type: 'Promotion',
            description: `Promoted to ${p.promotionRank}`,
            status: p.status
        })),
        ...data.demotions.map(d => ({
            date: new Date(d.createdAt),
            type: 'Demotion',
            description: `Demoted to ${d.demotionRank}`,
            status: 'completed'
        })),
        ...data.disciplinaryActions.map(d => ({
            date: new Date(d.dateIssued),
            type: 'Disciplinary',
            description: `Grade ${d.grade} Action`,
            status: d.status
        }))
    ].sort((a, b) => b.date - a.date);

    return `
        <div class="p-6">
            <!-- Profile Header -->
            <div class="flex items-center mb-6">
                <div class="p-3 rounded-full bg-blue-100 text-blue-600">
                    <i class="fas fa-user text-2xl"></i>
                </div>
                <div class="ml-4">
                    <h2 class="text-2xl font-bold text-gray-900">${escapeHtml(data.username)}</h2>
                    <p class="text-gray-500">${escapeHtml(data.highestRole)}</p>
                </div>
            </div>

            <!-- Basic Info -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                <div>
                    <h3 class="text-lg font-semibold mb-4">Statistics</h3>
                    <div class="space-y-4">
                        <div class="flex justify-between p-3 bg-gray-50 rounded">
                            <span>XP</span>
                            <span class="font-semibold">${data.xp?.toLocaleString() || '0'}</span>
                        </div>
                        <div class="flex justify-between p-3 bg-gray-50 rounded">
                            <span>Division</span>
                            <span class="font-semibold">${escapeHtml(data.division?.name || 'None')}</span>
                        </div>
                        <div class="flex justify-between p-3 bg-gray-50 rounded">
                            <span>Position</span>
                            <span class="font-semibold">${escapeHtml(data.division?.position || 'None')}</span>
                        </div>
                        <div class="flex justify-between p-3 bg-gray-50 rounded">
                            <span>Join Date</span>
                            <span class="font-semibold">${new Date(data.dateJoined).toLocaleDateString()}</span>
                        </div>
                    </div>
                </div>

                <!-- Recent Events -->
                <div>
                    <h3 class="text-lg font-semibold mb-4">Recent Events</h3>
                    <div class="space-y-3">
                        ${allEvents.slice(0, 5).map(event => `
                            <div class="flex items-center p-3 bg-gray-50 rounded">
                                <div class="w-2 h-2 rounded-full ${getEventTypeColor(event.type)} mr-3"></div>
                                <span class="flex-1">${escapeHtml(event.description)}</span>
                                <span class="text-sm text-gray-500">
                                    ${event.date.toLocaleDateString()}
                                </span>
                            </div>
                        `).join('')}
                    </div>
                </div>
            </div>

            <!-- Tabs Navigation -->
            <div class="border-b border-gray-200 mb-6">
                <nav class="flex -mb-px">
                    <button onclick="switchProfileTab(event, 'trainings')" class="profile-tab-btn px-4 py-2 border-b-2 font-medium text-sm mr-4">
                        Training History
                    </button>
                    <button onclick="switchProfileTab(event, 'promotions')" class="profile-tab-btn px-4 py-2 border-b-2 font-medium text-sm mr-4">
                        Promotions/Demotions
                    </button>
                    <button onclick="switchProfileTab(event, 'disciplinary')" class="profile-tab-btn px-4 py-2 border-b-2 font-medium text-sm">
                        Disciplinary Actions
                    </button>
                </nav>
            </div>

            <!-- Tab Contents -->
            <div id="trainingsTab" class="profile-tab-content">
                ${generateTrainingHistoryHTML(data.trainings)}
            </div>

            <div id="promotionsTab" class="profile-tab-content hidden">
                ${generatePromotionHistoryHTML(data.promotions, data.demotions)}
            </div>

            <div id="disciplinaryTab" class="profile-tab-content hidden">
                ${generateDisciplinaryHistoryHTML(data.disciplinaryActions)}
            </div>
        </div>
    `;
}

function generateTrainingHistoryHTML(trainings) {
    if (!trainings?.length) {
        return `
            <div class="p-3 bg-gray-50 rounded text-gray-500">
                No training history available
            </div>
        `;
    }

    return `
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Date</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Type</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Role</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">XP</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Status</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Details</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    ${trainings.map(training => `
                        <tr>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                ${new Date(training.createdAt).toLocaleDateString()}
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                ${escapeHtml(training.type)}
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                ${training.instructor._id === training.trainees[0]._id ? 'Instructor' : 'Trainee'}
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                ${training.xpAmount || 0}
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <span class="px-2 py-1 text-xs rounded-full ${getStatusClass(training.status)}">
                                    ${escapeHtml(training.status)}
                                </span>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                ${generateTrainingDetails(training)}
                            </td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        </div>
    `;
}

function generatePromotionHistoryHTML(promotions, demotions) {
    const allChanges = [
        ...promotions.map(p => ({
            date: new Date(p.createdAt),
            type: 'Promotion',
            from: p.currentRank,
            to: p.promotionRank,
            by: p.promotedBy.username,
            reason: p.reason,
            status: p.status,
            approval: p.officerApproval
        })),
        ...demotions.map(d => ({
            date: new Date(d.createdAt),
            type: 'Demotion',
            from: d.previousRank,
            to: d.demotionRank,
            by: d.demotedBy.username,
            reason: d.reason,
            status: 'completed'
        }))
    ].sort((a, b) => b.date - a.date);

    if (allChanges.length === 0) {
        return `
            <div class="p-3 bg-gray-50 rounded text-gray-500">
                No promotion or demotion history available.
            </div>
        `;
    }

    return `
        <div class="space-y-4">
            ${allChanges.map(change => `
                <div class="border-l-4 ${change.type === 'Promotion' ? 'border-green-500' : 'border-red-500'} p-4 bg-gray-50">
                    <div class="flex justify-between items-start">
                        <div>
                            <h4 class="font-medium">${change.type}: ${escapeHtml(change.from)} → ${escapeHtml(change.to)}</h4>
                            <p class="text-sm text-gray-600 mt-1">${escapeHtml(change.reason || 'No reason provided')}</p>
                            <p class="text-xs text-gray-500 mt-2">
                                ${change.type === 'Promotion' ? 'Promoted' : 'Demoted'} by ${escapeHtml(change.by)} on 
                                ${change.date.toLocaleDateString()}
                            </p>
                            ${change.approval ? `
                                <p class="text-xs text-gray-500">
                                    ${change.status === 'approved' ? 'Approved' : 'Rejected'} by 
                                    ${escapeHtml(change.approval.officer.username)} on 
                                    ${new Date(change.approval.date).toLocaleDateString()}
                                </p>
                            ` : ''}
                        </div>
                        <span class="px-2 py-1 text-xs rounded-full ${getStatusClass(change.status)}">
                            ${escapeHtml(change.status)}
                        </span>
                    </div>
                </div>
            `).join('')}
        </div>
    `;
}

function generateDisciplinaryHistoryHTML(actions) {
    if (!actions?.length) {
        return `
            <div class="p-3 bg-gray-50 rounded text-gray-500">
                No disciplinary history available.
            </div>
        `;
    }

    return `
        <div class="space-y-4">
            ${actions.map(action => `
                <div class="border-l-4 border-yellow-500 p-4 bg-gray-50">
                    <div class="flex justify-between items-start">
                        <div class="flex-grow">
                            <h4 class="font-medium">Grade ${action.grade} Disciplinary Action</h4>
                            <p class="text-sm text-gray-600 mt-1">${escapeHtml(action.reason)}</p>
                            ${action.xpDeduction ? `
                                <p class="text-sm text-red-600 mt-1">XP Deduction: ${action.xpDeduction}</p>
                            ` : ''}
                            ${action.demotionRank ? `
                                <p class="text-sm text-red-600 mt-1">Demotion to: ${escapeHtml(action.demotionRank)}</p>
                            ` : ''}
                            <p class="text-xs text-gray-500 mt-2">
                                Issued by ${escapeHtml(action.issuedBy.username)} on 
                                ${new Date(action.dateIssued).toLocaleDateString()}
                            </p>
                            ${action.officerApproval ? `
                                <p class="text-xs text-gray-500">
                                    ${action.status === 'approved' ? 'Approved' : 'Rejected'} by 
                                    ${escapeHtml(action.officerApproval.officer.username)} on 
                                    ${new Date(action.officerApproval.date).toLocaleDateString()}
                                    ${action.officerApproval.notes ? `<br>Notes: ${escapeHtml(action.officerApproval.notes)}` : ''}
                                </p>
                            ` : ''}
                        </div>
                        <span class="px-2 py-1 text-xs rounded-full ${getStatusClass(action.status)}">
                            ${escapeHtml(action.status)}
                        </span>
                    </div>
                </div>
            `).join('')}
        </div>
    `;
}

function generateTrainingDetails(training) {
    const details = [];
    
    if (training.instructor) {
        details.push(`Instructor: ${escapeHtml(training.instructor.username)}`);
    }
    
    if (training.trainees?.length) {
        details.push(`Trainees: ${training.trainees.map(t => escapeHtml(t.username)).join(', ')}`);
    }

    if (training.approvalChain?.length) {
        const lastApproval = training.approvalChain[training.approvalChain.length - 1];
        details.push(`Last action: ${lastApproval.action} by ${escapeHtml(lastApproval.approver.username)}`);
    }

    return details.join('<br>');
}

function getStatusClass(status) {
    const classes = {
        approved: 'bg-green-100 text-green-800',
        completed: 'bg-green-100 text-green-800',
        pending: 'bg-yellow-100 text-yellow-800',
        rejected: 'bg-red-100 text-red-800',
        'bumped_up': 'bg-blue-100 text-blue-800',
        'bumped_back': 'bg-orange-100 text-orange-800',
        default: 'bg-gray-100 text-gray-800'
    };
    return classes[status?.toLowerCase()] || classes.default;
}

function getEventTypeColor(type) {
    const colors = {
        'Training': 'bg-blue-500',
        'Promotion': 'bg-green-500',
        'Demotion': 'bg-red-500',
        'Disciplinary': 'bg-yellow-500'
    };
    return colors[type] || 'bg-gray-500';
}

function switchProfileTab(event, tabName) {
    // Update buttons
    document.querySelectorAll('.profile-tab-btn').forEach(btn => {
        btn.classList.remove('border-blue-500', 'text-blue-600');
        btn.classList.add('border-transparent', 'text-gray-500');
    });
    event.target.classList.add('border-blue-500', 'text-blue-600');
    event.target.classList.remove('border-transparent', 'text-gray-500');

    // Update content
    document.querySelectorAll('.profile-tab-content').forEach(content => {
        content.classList.add('hidden');
    });
    document.getElementById(tabName + 'Tab').classList.remove('hidden');
}

function closeProfileModal() {
    document.getElementById('profileModal').classList.add('hidden');
}

// Utility function to escape HTML and prevent XSS
function escapeHtml(unsafe) {
    if (typeof unsafe !== 'string') return '';
    return unsafe
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
}
    </script>
</body>
