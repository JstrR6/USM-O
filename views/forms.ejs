<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %> | Military Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        .folder {
            transition: transform 0.2s, box-shadow 0.2s;
        }
        .folder:hover {
            transform: scale(1.05);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
        }
        .folder-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 1.5rem;
        }
        .folder-opened .folder-grid {
            transform: scale(0.95);
            margin-bottom: 2rem;
        }
        .folder-content {
            background-color: #e5e7eb;
            padding: 1.5rem;
            border-radius: 0.5rem;
            margin-top: -1rem;
            animation: fadeIn 0.2s ease-in-out;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .modal {
            position: fixed;
            inset: 0;
            background-color: rgba(0, 0, 0, 0.6);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 50;
        }
    </style>
</head>
<body class="bg-gray-100">
    <div class="min-h-screen flex">
        <!-- Sidebar -->
        <div class="bg-gray-800 text-white w-64 py-6 flex flex-col">
            <div class="px-6 py-4">
                <h1 class="text-2xl font-semibold">Military Portal</h1>
            </div>
            <nav class="flex-1 px-4 mt-6">
                <a href="/dashboard" class="flex items-center px-4 py-3 text-gray-300 hover:bg-gray-700 rounded-lg <%= path === '/dashboard' ? 'bg-gray-700' : '' %>">
                    <i class="fas fa-home w-5 h-5 mr-3"></i> Dashboard
                </a>
                <a href="/forms" class="flex items-center px-4 py-3 mt-2 text-gray-300 hover:bg-gray-700 rounded-lg <%= path === '/forms' ? 'bg-gray-700' : '' %>">
                    <i class="fas fa-file-alt w-5 h-5 mr-3"></i> Forms
                </a>
                <a href="/profile" class="flex items-center px-4 py-3 mt-2 text-gray-300 hover:bg-gray-700 rounded-lg <%= path === '/profile' ? 'bg-gray-700' : '' %>">
                    <i class="fas fa-user w-5 h-5 mr-3"></i> Profile
                </a>
                <a href="/members" class="flex items-center px-4 py-3 mt-2 text-gray-300 hover:bg-gray-700 rounded-lg <%= path === '/members' ? 'bg-gray-700' : '' %>">
                    <i class="fas fa-users w-5 h-5 mr-3"></i> Members
                </a>
            </nav>
            <div class="px-6 py-4 border-t border-gray-700">
                <div class="flex items-center">
                    <div class="ml-3">
                        <p class="text-sm font-medium"><%= user.username %></p>
                        <p class="text-xs text-gray-400"><%= user.highestRole %></p>
                    </div>
                </div>
                <a href="/logout" class="mt-4 block px-4 py-2 text-center text-sm text-white bg-red-600 hover:bg-red-700 rounded-lg">Logout</a>
            </div>
        </div>

        <!-- Main Content -->
        <div class="flex-1 p-6">
            <h1 class="text-2xl font-bold mb-6">Forms</h1>

            <% const RANKS = [
                "Citizen", "Airman Basic", "Airman", "Airman First Class", "Senior Airman",
                "Staff Sergeant", "Technical Sergeant", "Master Sergeant", "First Sergeant",
                "Senior Master Sergeant", "Senior First Sergeant", "Chief Master Sergeant",
                "Chief First Sergeant", "Command Chief Master Sergeant", "Senior Enlisted Leader",
                "Chief Senior Enlisted Leader", "Chief Master Sergeant of the Air Force",
                "Second Lieutenant", "First Lieutenant", "Captain",
                "Major", "Lieutenant Colonel", "Colonel",
                "Brigadier General", "Major General", "Lieutenant General", "General", "General of the Air Force"
            ]; %>

            <% const folderMap = [
                { name: 'Citizen', ranks: ['Citizen'], icon: 'fa-user', priority: 1 },
                { name: 'Enlisted', ranks: ['Airman Basic', 'Airman', 'Airman First Class', 'Senior Airman'], icon: 'fa-users', priority: 2 },
                { name: 'NCO', ranks: ['Staff Sergeant', 'Technical Sergeant', 'Master Sergeant', 'First Sergeant'], icon: 'fa-user-shield', priority: 3 },
                { name: 'SNCO', ranks: [
                    'Senior Master Sergeant', 'Senior First Sergeant', 'Chief Master Sergeant',
                    'Chief First Sergeant', 'Command Chief Master Sergeant', 'Senior Enlisted Leader',
                    'Chief Senior Enlisted Leader', 'Chief Master Sergeant of the Air Force'
                ], icon: 'fa-user-tie', priority: 4 },
                { name: 'Company Officers', ranks: ['Second Lieutenant', 'First Lieutenant', 'Captain'], icon: 'fa-chess-pawn', priority: 5 },
                { name: 'Field Officers', ranks: ['Major', 'Lieutenant Colonel', 'Colonel'], icon: 'fa-chess-rook', priority: 6 },
                { name: 'Headquarters', ranks: ['Brigadier General', 'Major General', 'Lieutenant General', 'General', 'General of the Air Force'], icon: 'fa-chess-king', priority: 7 },
            ]; %>

            <% const userRank = user.highestRole;
            const userRankIndex = RANKS.indexOf(userRank);
            const availableFolders = folderMap.filter(folder =>
                folder.ranks.some(rank => RANKS.indexOf(rank) <= userRankIndex)
            ).sort((a, b) => b.priority - a.priority); %>

            <div class="folder-grid folder-opened">
                <% availableFolders.forEach(folder => { %>
                    <div class="folder bg-white rounded-lg p-4 shadow flex justify-between items-center cursor-pointer" onclick="toggleFolder(&quot;<%= folder.name %>&quot;)">
                        <div>
                            <i class="fas <%= folder.icon %> text-2xl mb-2"></i>
                            <p class="font-semibold mt-2"><%= folder.name %></p>
                        </div>
                        <% const primaryRank = folder.ranks.find(r => RANKS.indexOf(r) <= userRankIndex && r !== 'Citizen' && r !== 'Airman Basic'); %>
                        <% if (primaryRank) { %>
                            <img src="/images/<%= primaryRank.replace(/ /g, '') %>.png" alt="<%= primaryRank %>" class="h-10 w-auto">
                        <% } %>
                    </div>
                <% }) %>
            </div>

            <% availableFolders.forEach(folder => { %>
                <div id="folder-<%= folder.name %>" class="folder-content hidden">
                    <h2 class="text-xl font-bold mb-4"><%= folder.name %> Forms</h2>
                    <% if (folder.name === 'Citizen') { %>
                        <div class="bg-white rounded-lg shadow p-6 cursor-pointer hover:shadow-md" onclick="openRecruitmentForm()">
                            <h3 class="text-lg font-semibold text-gray-800 mb-1">Form 323 – Recruitment Request</h3>
                            <p class="text-sm text-gray-600">Submit a request to enlist into the Air Force.</p>
                        </div>
                    <% } %>

                    <% if (folder.name === 'NCO') { %>
                        <div class="bg-white rounded-lg shadow p-6 cursor-pointer hover:shadow-md" onclick="openTrainingForm150()">
                          <h3 class="text-lg font-semibold text-gray-800 mb-1">Form 150 – Training Report</h3>
                          <p class="text-sm text-gray-600">Log training events and submit for SNCO review.</p>
                        </div>

                        <div class="bg-white rounded-lg shadow p-6 cursor-pointer hover:shadow-md" onclick="openForm110Modal()">
                            <h3 class="text-lg font-semibold text-gray-800 mb-1">Form 110 – Performance Report</h3>
                            <p class="text-sm text-gray-600">Evaluate a trainee’s performance across key areas.</p>
                          </div>
                      <% } %>

                    <% if (folder.name === 'SNCO') { %>
                        <div class="bg-white rounded-lg shadow p-6 cursor-pointer hover:shadow-md" onclick="document.getElementById('form122Modal').classList.remove('hidden')">
                          <h3 class="text-lg font-semibold text-gray-800 mb-1">Form 122 – Division Removal</h3>
                          <p class="text-sm text-gray-600">Request removal of a member from a division.</p>
                        </div>

                        <div class="bg-white rounded-lg shadow p-6 cursor-pointer hover:shadow-md" onclick="openForm150SncoModal()">
                            <h3 class="text-lg font-semibold text-gray-800 mb-1">Form 150 SNCO Queue</h3>
                            <p class="text-sm text-gray-600">Review pending training reports and recommend XP.</p>
                          </div>

                          <div class="bg-white rounded-lg shadow p-6 cursor-pointer hover:shadow-md" onclick="openSNCOPerformanceModal()">
                            <h3 class="text-lg font-semibold text-gray-800 mb-1">Performance Report Management</h3>
                            <p class="text-sm text-gray-600">Review, flag, and manage performance reports.</p>
                          </div>
                      <% } %>

                      <% if (folder.name === 'Company Officers') { %>
                        <div class="bg-white rounded-lg shadow p-6 cursor-pointer hover:shadow-md" onclick="openForm122OfficerQueue()">
                          <h3 class="text-lg font-semibold text-gray-800 mb-1">Form 122 Review Queue</h3>
                          <p class="text-sm text-gray-600">Process division removal forms submitted by SNCOs.</p>
                        </div>

                        <div class="bg-white rounded-lg shadow p-6 cursor-pointer hover:shadow-md" onclick="openForm150OfficerModal()">
                            <h3 class="text-lg font-semibold text-gray-800 mb-1">Form 150 Officer Queue</h3>
                            <p class="text-sm text-gray-600">Review and finalize training reports.</p>
                          </div>

                          <div class="bg-white rounded-lg shadow p-6 cursor-pointer hover:shadow-md" onclick="openAssignUserModal()">
                            <h3 class="text-lg font-semibold text-gray-800 mb-1">Assign User to Division</h3>
                            <p class="text-sm text-gray-600">Assign a user to a specific division with a defined role.</p>
                        </div>
                      <% } %>

                      <% if (folder.name === 'Field Officers') { %>
                        <div class="bg-white rounded-lg shadow p-6 cursor-pointer hover:shadow-md" onclick="openForm122FieldOfficerModal()">
                          <h3 class="text-lg font-semibold text-gray-800 mb-1">Review Form 122 – Division Removal</h3>
                          <p class="text-sm text-gray-600">Review and approve or block submitted division removal forms.</p>
                        </div>

                        <div class="bg-white rounded-lg shadow p-6 cursor-pointer hover:shadow-md" onclick="openForm150FieldOfficerModal()">
                            <h3 class="text-lg font-semibold text-gray-800 mb-1">Form 150 – Field Officer Training Manager</h3>
                            <p class="text-sm text-gray-600">Review all training forms and manage HOLD status.</p>
                          </div>
                      <% } %>

                    <% if (folder.name === 'Headquarters') { %>
                        <div class="bg-white rounded-lg shadow p-6 cursor-pointer hover:shadow-md" onclick="openDivisionForm()">
                            <h3 class="text-lg font-semibold text-gray-800 mb-1">Division Management</h3>
                            <p class="text-sm text-gray-600">Create and manage divisions in the command structure.</p>
                        </div>

                        <div class="bg-white rounded-lg shadow p-6 cursor-pointer hover:shadow-md" onclick="openDivisionBrowser()">
                            <h3 class="text-lg font-semibold text-gray-800 mb-1">Division Browser</h3>
                            <p class="text-sm text-gray-600">View the hierarchical structure of all divisions and assigned personnel.</p>
                          </div>

                    <% } %>
                </div>
            <% }) %>
        </div>
    </div>

    <!-- Recruitment Form Modal -->
    <div id="recruitmentFormModal" class="modal hidden overflow-auto py-6">
        <div class="bg-white rounded-lg shadow-lg w-full max-w-2xl p-6 relative">
            <button class="absolute top-3 right-3 text-gray-600 hover:text-red-600 text-xl" onclick="closeRecruitmentForm()">&times;</button>
            <h2 class="text-xl font-bold mb-4">Form 323 – Recruitment Request</h2>

            <div id="submissionSuccess" class="hidden mb-4 p-3 rounded bg-green-100 text-green-700 border border-green-300">
                Recruitment request submitted successfully!
            </div>

            <form action="/api/recruitment" method="POST" onsubmit="showSuccessMessage()" class="space-y-4">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block font-medium text-sm mb-1">Full Name</label>
                        <input name="fullName" type="text" class="w-full border border-gray-300 rounded px-3 py-2" required>
                    </div>
                    <div>
                        <label class="block font-medium text-sm mb-1">Username</label>
                        <input name="username" type="text" class="w-full border border-gray-300 rounded px-3 py-2" required>
                    </div>
                    <div>
                        <label class="block font-medium text-sm mb-1">Discord Username</label>
                        <input name="discordUsername" type="text" class="w-full border border-gray-300 rounded px-3 py-2" required>
                    </div>
                    <div>
                        <label class="block font-medium text-sm mb-1">Timezone</label>
                        <input name="timezone" type="text" class="w-full border border-gray-300 rounded px-3 py-2" required>
                    </div>
                </div>
                <div>
                    <label class="block font-medium text-sm mb-1">Career Interest</label>
                    <input name="careerInterest" type="text" class="w-full border border-gray-300 rounded px-3 py-2" required>
                </div>
                <div>
                    <label class="block font-medium text-sm mb-1">Expected Time Commitment per Week</label>
                    <input name="hoursPerWeek" type="number" class="w-full border border-gray-300 rounded px-3 py-2">
                </div>
                <div>
                    <label class="block font-medium text-sm mb-1">Referred By (Optional)</label>
                    <input name="referredBy" type="text" class="w-full border border-gray-300 rounded px-3 py-2">
                </div>
                <div>
                    <label class="block font-medium text-sm mb-1">Remarks / Anything Else</label>
                    <textarea name="remarks" rows="4" class="w-full border border-gray-300 rounded px-3 py-2"></textarea>
                </div>
                <div class="text-right">
                    <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">Submit</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Division Management Modal -->
    <div id="divisionFormModal" class="modal hidden overflow-auto py-6">
        <div class="bg-white rounded-lg shadow-lg w-full max-w-2xl p-6 relative">
            <button class="absolute top-3 right-3 text-gray-600 hover:text-red-600 text-xl" onclick="closeDivisionForm()">&times;</button>
            <h2 class="text-xl font-bold mb-4">Division Management</h2>
            <form action="/api/division/create" method="POST" class="space-y-4">
                <div>
                    <label class="block font-medium text-sm mb-1">Division Name</label>
                    <input name="name" type="text" class="w-full border border-gray-300 rounded px-3 py-2" required>
                </div>
                <div>
                    <label class="block font-medium text-sm mb-1">Parent Division (Optional)</label>
                    <select name="parentDivisionId" class="w-full border border-gray-300 rounded px-3 py-2">
                        <option value="">None</option>
                        <% divisions.forEach(function(d) { %>
                            <option value="<%= d._id %>"><%= d.name %></option>
                        <% }) %>
                    </select>
                </div>
                <div class="text-sm text-gray-500 italic">
                    You can assign users to this division later from the personnel interface.
                </div>
                <div class="text-right">
                    <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">Create Division</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Division Browser Modal -->
    <div id="divisionBrowserModal" class="modal hidden overflow-auto py-6">
        <div class="bg-white rounded-lg shadow-lg w-full max-w-4xl p-6 relative">
        <button class="absolute top-3 right-3 text-gray-600 hover:text-red-600 text-xl" onclick="closeDivisionBrowser()">&times;</button>
        <h2 class="text-xl font-bold mb-4">Division Browser</h2>
        <div id="divisionTreeContainer"></div>
        </div>
    </div>

    <div id="assignUserModal" class="modal hidden overflow-auto py-6">
        <div class="bg-white rounded-lg shadow-lg w-full max-w-2xl p-6 relative">
            <button class="absolute top-3 right-3 text-gray-600 hover:text-red-600 text-xl" onclick="closeAssignUserModal()">&times;</button>
            <h2 class="text-xl font-bold mb-4">Assign User to Division</h2>
    
            <form action="/api/division/assign-user" method="POST" class="space-y-4" onsubmit="return validateUserSelection()">
                <div>
                    <label class="block font-medium text-sm mb-1">Search User</label>
                    <input type="text" id="userSearch" oninput="filterUsers()" placeholder="Type to search..." class="w-full border border-gray-300 rounded px-3 py-2">
                    <div id="userSearchResults" class="mt-2 border border-gray-300 rounded bg-white max-h-40 overflow-y-auto"></div>
                    <input type="hidden" name="userId" id="selectedUserId">
                </div>
            
                <div>
                    <label class="block font-medium text-sm mb-1">Select Division</label>
                    <select name="divisionId" class="w-full border border-gray-300 rounded px-3 py-2">
                        <% divisions.forEach(function(d) { %>
                            <option value="<%= d._id %>"><%= d.name %></option>
                        <% }) %>
                    </select>
                </div>
            
                <div>
                    <label class="block font-medium text-sm mb-1">Role</label>
                    <input name="role" type="text" class="w-full border border-gray-300 rounded px-3 py-2">
                </div>
            
                <div class="text-right">
                    <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">Assign</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Division Removal Modal -->
    <div id="form122Modal" class="modal hidden overflow-auto py-6">
        <div class="bg-white rounded-lg shadow-lg w-full max-w-2xl p-6 relative">
          <button class="absolute top-3 right-3 text-gray-600 hover:text-red-600 text-xl" onclick="document.getElementById('form122Modal').classList.add('hidden')">&times;</button>
          <h2 class="text-xl font-bold mb-4">Form 122 – Division Removal</h2>
      
          <!-- ✅ Updated action path -->
          <form action="/api/division-removal/submit" method="POST" class="space-y-4">
            <div>
              <label class="block text-sm font-medium">Select User</label>
              <select name="targetUser" class="w-full border border-gray-300 rounded px-3 py-2" required>
                <% users.forEach(function(u) { %>
                  <option value="<%= u._id %>"><%= u.username %></option>
                <% }) %>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium">Select Division</label>
              <select name="targetDivision" class="w-full border border-gray-300 rounded px-3 py-2" required>
                <% divisions.forEach(function(d) { %>
                  <option value="<%= d._id %>"><%= d.name %></option>
                <% }) %>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium">Reason for Removal</label>
              <textarea name="reason" rows="3" class="w-full border border-gray-300 rounded px-3 py-2" required></textarea>
            </div>
            <div>
              <label class="block text-sm font-medium">Context / Background Info</label>
              <textarea name="context" rows="4" class="w-full border border-gray-300 rounded px-3 py-2"></textarea>
            </div>
            <div class="text-right">
              <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">Sign and Send</button>
            </div>
          </form>
        </div>
      </div>

      <div id="form122OfficerQueueModal" class="modal hidden overflow-auto py-6">
        <div class="bg-white rounded-lg shadow-lg w-full max-w-4xl p-6 relative">
          <button class="absolute top-3 right-3 text-gray-600 hover:text-red-600 text-xl" onclick="closeForm122OfficerQueue()">&times;</button>
          <h2 class="text-xl font-bold mb-4">Form 122 – Officer Review</h2>
      
          <% if (form122OfficerQueue && form122OfficerQueue.length > 0) { %>
            <% form122OfficerQueue.forEach(form => { %>
              <div class="border border-gray-300 rounded p-4 mb-4">
                <p class="text-sm text-gray-800"><strong>Target:</strong> <%= form.targetUsername %></p>
                <p class="text-sm text-gray-800"><strong>Division:</strong> <%= form.divisionName %></p>
                <p class="text-sm text-gray-800"><strong>Reason:</strong> <%= form.reason %></p>
                <p class="text-sm text-gray-500 mb-2"><strong>SNCO Signature:</strong> <%= form.sncoSignature %></p>
      
                <!-- ✅ Fixed action path -->
                <form action="/api/division-removal/officer-submit" method="POST" class="space-y-3 mt-2">
                  <input type="hidden" name="formId" value="<%= form._id %>">
                  <label class="block text-sm font-medium">Officer Comments</label>
                  <textarea name="officerComments" rows="3" class="w-full border border-gray-300 rounded px-3 py-2"></textarea>
                  <div class="text-right">
                    <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">Submit Review</button>
                  </div>
                </form>
              </div>
            <% }) %>
          <% } else { %>
            <p class="text-gray-600">No pending Form 122 submissions to review.</p>
          <% } %>
        </div>
      </div>
      

      <div id="form122FieldOfficerModal" class="modal hidden overflow-auto py-6">
        <div class="bg-white rounded-lg shadow-lg w-full max-w-3xl p-6 relative">
          <button class="absolute top-3 right-3 text-gray-600 hover:text-red-600 text-xl" onclick="closeForm122FieldOfficerModal()">&times;</button>
          <h2 class="text-xl font-bold mb-4">Form 122 Final Review – Field Officer</h2>
          <div id="fieldOfficerReviewContainer"></div>
        </div>
      </div>

      <!-- Training Form -->
      <div id="form150Modal" class="modal hidden overflow-auto py-6">
        <div class="bg-white rounded-lg shadow-lg w-full max-w-3xl p-6 relative">
          <button class="absolute top-3 right-3 text-gray-600 hover:text-red-600 text-xl" onclick="document.getElementById('form150Modal').classList.add('hidden')">&times;</button>
          <h2 class="text-xl font-bold mb-4">Form 150 – Training Report</h2>
      
          <form action="/api/training/submit" method="POST" class="space-y-4" onsubmit="return validateTraineeSelection()">
            <!-- Trainee Live Search -->
            <div>
              <label class="block text-sm font-medium mb-1">Search Trainees</label>
              <input type="text" id="traineeSearch" oninput="filterTrainees()" placeholder="Type to search..." class="w-full border border-gray-300 rounded px-3 py-2">
              <div id="traineeSearchResults" class="mt-2 border border-gray-300 rounded bg-white max-h-40 overflow-y-auto"></div>
              <input type="hidden" name="trainees" id="selectedTrainees">
              <div id="selectedTraineeTags" class="flex flex-wrap gap-2 mt-2"></div>
            </div>
      
            <!-- Training Event -->
            <div class="grid grid-cols-2 gap-4">
              <div>
                <label class="block text-sm font-medium mb-1">Start Time</label>
                <input type="datetime-local" name="startTime" class="w-full border rounded px-3 py-2" required>
              </div>
              <div>
                <label class="block text-sm font-medium mb-1">End Time</label>
                <input type="datetime-local" name="endTime" class="w-full border rounded px-3 py-2" required>
              </div>
            </div>
      
            <!-- Event Name -->
            <div>
              <label class="block text-sm font-medium mb-1">Training Event</label>
              <input type="text" name="eventName" class="w-full border rounded px-3 py-2" required>
            </div>
      
            <!-- Grade -->
            <div>
              <label class="block text-sm font-medium mb-1">Overall Grade</label>
              <div class="flex gap-4 mt-1">
                <label><input type="radio" name="grade" value="Excellent" required> Excellent</label>
                <label><input type="radio" name="grade" value="Satisfactory"> Satisfactory</label>
                <label><input type="radio" name="grade" value="Needs Improvement"> Needs Improvement</label>
              </div>
            </div>
      
            <!-- Outcome -->
            <div>
              <label class="block text-sm font-medium mb-1">Training Outcome</label>
              <select name="outcome" id="outcomeSelect" class="w-full border rounded px-3 py-2" required onchange="toggleOutcomeTraineeFields()">
                <option value="">Select Outcome</option>
                <option value="Satisfactory">Training Satisfactory</option>
                <option value="Remedial">Remedial Training Advised</option>
                <option value="Failed">Training Failed</option>
              </select>
            </div>
      
            <!-- Conditional Fields -->
            <div id="remedialTrainees" class="hidden">
              <label class="block text-sm font-medium mb-1">Trainees Needing Remedial Training</label>
              <input type="text" name="remedialTrainees" class="w-full border rounded px-3 py-2" placeholder="e.g. JaneSmith">
            </div>
      
            <div id="failedTrainees" class="hidden">
              <label class="block text-sm font-medium mb-1">Trainees Who Failed</label>
              <input type="text" name="failedTrainees" class="w-full border rounded px-3 py-2" placeholder="e.g. JohnDoe">
            </div>
      
            <!-- Submit -->
            <div class="text-right">
              <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">Sign and Send</button>
            </div>
          </form>
        </div>
      </div>

      <div id="form150SncoModal" class="modal hidden overflow-auto py-6">
        <div class="bg-white rounded-lg shadow-lg w-full max-w-4xl p-6 relative">
            <button class="absolute top-3 right-3 text-gray-600 hover:text-red-600 text-xl" onclick="closeForm150SncoModal()">&times;</button>
            <h2 class="text-xl font-bold mb-4">Form 150 – SNCO Review</h2>
            
            <!-- Container for SNCO Review Cards -->
            <div id="form150SncoQueueContainer" class="space-y-4">
                <p class="text-gray-600">Loading...</p>
            </div>
        </div>
    </div>

    <!-- New Modal for Detailed Review (Full Form) -->
<div id="form150DetailModal" class="modal hidden overflow-auto py-6">
    <div class="bg-white rounded-lg shadow-lg w-full max-w-3xl p-6 relative">
        <button class="absolute top-3 right-3 text-gray-600 hover:text-red-600 text-xl" onclick="closeForm150DetailModal()">&times;</button>
        <h2 class="text-xl font-bold mb-4">Form 150 – SNCO Detailed Review</h2>
        
        <!-- Dynamic Content will be added here -->
        <div id="form150DetailContent"></div>
    </div>
</div>

      <div id="form150OfficerModal" class="modal hidden overflow-auto py-6">
        <div class="bg-white rounded-lg shadow-lg w-full max-w-5xl p-6 relative">
          <button class="absolute top-3 right-3 text-gray-600 hover:text-red-600 text-xl" onclick="closeForm150OfficerModal()">&times;</button>
          <h2 class="text-xl font-bold mb-4">Form 150 – Company Officer Approval</h2>
          <div id="form150OfficerQueueContainer">
            <p class="text-gray-600">Loading...</p>
          </div>
        </div>
      </div>

      <!-- Field Officer Training Management Modal -->
<div id="form150FieldOfficerModal" class="modal hidden overflow-auto py-6">
    <div class="bg-white rounded-lg shadow-lg w-full max-w-6xl p-6 relative">
      <button class="absolute top-3 right-3 text-gray-600 hover:text-red-600 text-xl" onclick="closeForm150FieldOfficerModal()">&times;</button>
      <h2 class="text-2xl font-bold mb-6">Training Management – Field Officers</h2>
      <div id="form150FieldOfficerContainer">
        <p class="text-gray-600">Loading...</p>
      </div>
    </div>
  </div>

  <!-- Form 110 - Enlisted Evaluation Report Modal -->
<div id="form110Modal" class="modal hidden overflow-auto py-6">
    <div class="bg-white rounded-lg shadow-lg w-full max-w-6xl p-8 relative max-h-[90vh] overflow-y-auto">
      <button class="absolute top-4 right-4 text-gray-600 hover:text-red-600 text-2xl" onclick="closeForm110Modal()">&times;</button>
      <h2 class="text-3xl font-bold mb-6">Form 110 – Enlisted Evaluation Report</h2>
  
      <form action="/api/performance/submit" method="POST" class="space-y-6">
        <!-- Target User Selection with Autocomplete -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label class="block text-sm font-medium">Select Member</label>
            <div class="relative">
              <input type="text" id="userSearchInput" class="w-full border border-gray-300 rounded px-3 py-2" 
                     placeholder="Type to search for a user..." autocomplete="off">
              <div id="userSuggestions" class="absolute z-10 w-full bg-white border border-gray-300 rounded-b max-h-40 overflow-y-auto hidden"></div>
              <input type="hidden" id="targetUserId" name="targetUser" required>
            </div>
            <div id="selectedUserDisplay" class="mt-2 text-sm text-blue-600"></div>
          </div>
          <div>
            <label class="block text-sm font-medium">Division</label>
            <select name="division" class="w-full border border-gray-300 rounded px-3 py-2">
              <option value="">-- Auto-detect Division --</option>
              <% divisions.forEach(function(d) { %>
                <option value="<%= d._id %>"><%= d.name %></option>
              <% }) %>
            </select>
            <p class="text-xs text-gray-500 mt-1">If left empty, the system will attempt to use the member's current division</p>
          </div>
          <div>
            <label class="block text-sm font-medium">Evaluation Start Date</label>
            <input type="date" name="periodStart" class="w-full border border-gray-300 rounded px-3 py-2" required>
          </div>
          <div>
            <label class="block text-sm font-medium">Evaluation End Date</label>
            <input type="date" name="periodEnd" class="w-full border border-gray-300 rounded px-3 py-2" required>
          </div>
        </div>
  
        <!-- Graded Sections -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label class="block font-semibold text-gray-800 mb-1">Communication</label>
            <input type="number" name="communication" min="1" max="5"
              class="w-full border border-gray-300 rounded px-3 py-2 mb-2" placeholder="Grade (1-5)" required>
          </div>
          <div>
            <label class="block font-semibold text-gray-800 mb-1">Discipline</label>
            <input type="number" name="discipline" min="1" max="5"
              class="w-full border border-gray-300 rounded px-3 py-2 mb-2" placeholder="Grade (1-5)" required>
          </div>
          <div>
            <label class="block font-semibold text-gray-800 mb-1">Teamwork</label>
            <input type="number" name="teamwork" min="1" max="5"
              class="w-full border border-gray-300 rounded px-3 py-2 mb-2" placeholder="Grade (1-5)" required>
          </div>
          <div>
            <label class="block font-semibold text-gray-800 mb-1">Leadership Potential</label>
            <input type="number" name="leadershipPotential" min="1" max="5"
              class="w-full border border-gray-300 rounded px-3 py-2 mb-2" placeholder="Grade (1-5)" required>
          </div>
          <div>
            <label class="block font-semibold text-gray-800 mb-1">Technical Skill</label>
            <input type="number" name="technicalSkill" min="1" max="5"
              class="w-full border border-gray-300 rounded px-3 py-2 mb-2" placeholder="Grade (1-5)" required>
          </div>
        </div>
  
        <!-- Other Sections -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label class="block text-sm font-medium">Strengths</label>
            <textarea name="strengths" rows="3" class="w-full border border-gray-300 rounded px-3 py-2"
              placeholder="Member's key strengths and positive contributions..."></textarea>
          </div>
          <div>
            <label class="block text-sm font-medium">Areas of Improvement</label>
            <textarea name="weaknesses" rows="3" class="w-full border border-gray-300 rounded px-3 py-2"
              placeholder="Areas where member needs improvement..."></textarea>
          </div>
          <div>
            <label class="block text-sm font-medium">Remarks</label>
            <textarea name="remarks" rows="3" class="w-full border border-gray-300 rounded px-3 py-2"
              placeholder="Additional comments, observations, and recommendations..."></textarea>
          </div>
          <div>
            <label class="block text-sm font-medium">Recommendations</label>
            <div class="flex flex-col gap-2 mt-2">
              <label><input type="checkbox" name="promotionRecommended" value="1"> Promotion</label>
              <label><input type="checkbox" name="additionalTraining" value="1"> Additional Training</label>
              <label><input type="checkbox" name="disciplinaryWatch" value="1"> Disciplinary Watch</label>
            </div>
          </div>
        </div>
  
        <!-- XP + Submit -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 items-end">
          <div>
            <label class="block text-sm font-medium">Recommended XP</label>
            <input type="number" name="recommendedXP" min="0" class="w-full border border-gray-300 rounded px-3 py-2">
            <p class="text-xs text-gray-500 mt-1">Amount of XP to award for this evaluation period</p>
          </div>
          <div class="text-right">
            <button type="submit" class="w-full md:w-auto px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
              Submit Evaluation
            </button>
          </div>
        </div>
      </form>
    </div>
  </div>

<!-- SNCO Performance Report Management Modal -->
<div id="sncoPerformanceModal" class="modal hidden overflow-auto py-6">
    <div class="bg-white rounded-lg shadow-lg w-full max-w-6xl p-6 relative max-h-[90vh] overflow-y-auto">
      <button class="absolute top-3 right-3 text-gray-600 hover:text-red-600 text-2xl" onclick="closeSNCOPerformanceModal()">&times;</button>
      <h2 class="text-2xl font-bold mb-4">Performance Report Management</h2>
      
      <!-- Reports List -->
      <div class="mb-6">
        <div class="flex justify-between items-center mb-2">
          <h3 class="text-lg font-semibold">All Performance Reports</h3>
          <div class="flex gap-2">
            <select id="reportStatusFilter" class="border border-gray-300 rounded px-2 py-1">
              <option value="all">All Statuses</option>
              <option value="Draft">Draft</option>
              <option value="Submitted">Submitted</option>
              <option value="Reviewed">Reviewed</option>
              <option value="Finalized">Finalized</option>
              <option value="Hold">On Hold</option>
              <option value="Flagged">Flagged</option>
            </select>
            <input type="text" id="reportSearchInput" placeholder="Search by username..." 
                   class="border border-gray-300 rounded px-2 py-1">
          </div>
        </div>
        
        <div class="overflow-x-auto">
          <table class="min-w-full bg-white border border-gray-300">
            <thead>
              <tr class="bg-gray-100">
                <th class="px-4 py-2 border text-left">Date</th>
                <th class="px-4 py-2 border text-left">Member</th>
                <th class="px-4 py-2 border text-left">Evaluator</th>
                <th class="px-4 py-2 border text-left">Score</th>
                <th class="px-4 py-2 border text-left">Flag</th>
                <th class="px-4 py-2 border text-left">Status</th>
                <th class="px-4 py-2 border text-left">Actions</th>
              </tr>
            </thead>
            <tbody id="performanceReportsList">
              <!-- Reports will be loaded here dynamically -->
              <tr>
                <td colspan="7" class="px-4 py-2 text-center">Loading reports...</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
      
      <!-- Detailed Report View (hidden initially) -->
      <div id="reportDetailView" class="hidden border rounded-lg p-6 bg-gray-50">
        <h3 id="reportDetailTitle" class="text-xl font-bold mb-4">Report Details</h3>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
          <div>
            <p><strong>Member:</strong> <span id="detail-member"></span></p>
            <p><strong>Evaluator:</strong> <span id="detail-evaluator"></span></p>
            <p><strong>Period:</strong> <span id="detail-period"></span></p>
            <p><strong>Status:</strong> <span id="detail-status"></span></p>
          </div>
          <div>
            <p><strong>Overall Score:</strong> <span id="detail-grade"></span></p>
            <p><strong>Recommended XP:</strong> <span id="detail-xp"></span></p>
            <p><strong>Flag:</strong> <span id="detail-flag"></span></p>
            <p><strong>Created:</strong> <span id="detail-date"></span></p>
          </div>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
            <div class="bg-white p-4 rounded border">
                <h4 class="font-bold mb-2">Evaluation Scores</h4>
                <div class="space-y-2">
                  <div class="flex justify-between">
                    <span>Communication:</span>
                    <span id="detail-communication">N/A</span>
                  </div>
                  <div class="flex justify-between">
                    <span>Discipline:</span>
                    <span id="detail-discipline">N/A</span>
                  </div>
                  <div class="flex justify-between">
                    <span>Teamwork:</span>
                    <span id="detail-teamwork">N/A</span>
                  </div>
                  <div class="flex justify-between">
                    <span>Leadership Potential:</span>
                    <span id="detail-leadership">N/A</span>
                  </div>
                  <div class="flex justify-between">
                    <span>Technical Skill:</span>
                    <span id="detail-technical">N/A</span>
                  </div>
                </div>
              </div>
          
          <div class="bg-white p-4 rounded border">
            <h4 class="font-bold mb-2">Recommendations</h4>
            <div class="space-y-2">
              <p><span id="promotion-badge" class="hidden px-2 py-1 rounded text-xs font-medium bg-green-100 text-green-800">Promotion Recommended</span></p>
              <p><span id="training-badge" class="hidden px-2 py-1 rounded text-xs font-medium bg-blue-100 text-blue-800">Additional Training</span></p>
              <p><span id="disciplinary-badge" class="hidden px-2 py-1 rounded text-xs font-medium bg-red-100 text-red-800">Disciplinary Watch</span></p>
            </div>
            
            <div class="mt-4">
              <h4 class="font-bold mb-2">Calculated Score</h4>
              <div class="w-full h-4 bg-gray-200 rounded">
                <div id="score-bar" class="h-4 rounded" style="width: 0%; background-color: #4CAF50;"></div>
              </div>
              <div class="flex justify-between text-xs mt-1">
                <span>1</span>
                <span>2</span>
                <span>3</span>
                <span>4</span>
                <span>5</span>
              </div>
            </div>
          </div>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
          <div class="bg-white p-4 rounded border">
            <h4 class="font-bold mb-2">Strengths</h4>
            <p id="detail-strengths" class="text-gray-700"></p>
          </div>
          <div class="bg-white p-4 rounded border">
            <h4 class="font-bold mb-2">Areas of Improvement</h4>
            <p id="detail-weaknesses" class="text-gray-700"></p>
          </div>
        </div>
        
        <div class="bg-white p-4 rounded border mb-6">
          <h4 class="font-bold mb-2">Evaluator Remarks</h4>
          <p id="detail-remarks" class="text-gray-700 whitespace-pre-line"></p>
        </div>
        
        <!-- SNCO Actions Form -->
        <form id="sncoActionForm" class="bg-white p-4 rounded border">
          <h4 class="font-bold mb-2">SNCO Actions</h4>
          
          <div class="mb-4">
            <label class="block text-sm font-medium mb-1">Flag Status</label>
            <div class="flex flex-wrap gap-2">
              <button type="button" class="px-3 py-1 rounded border border-gray-300 flex items-center gap-1 hover:bg-gray-100" 
                      onclick="setReportFlag('none')">
                <span class="w-3 h-3 rounded-full bg-gray-400"></span>
                <span>None</span>
              </button>
              <button type="button" class="px-3 py-1 rounded border border-gray-300 flex items-center gap-1 hover:bg-gray-100" 
                      onclick="setReportFlag('green')">
                <span class="w-3 h-3 rounded-full bg-green-500"></span>
                <span>Green (Exemplary)</span>
              </button>
              <button type="button" class="px-3 py-1 rounded border border-gray-300 flex items-center gap-1 hover:bg-gray-100" 
                      onclick="setReportFlag('blue')">
                <span class="w-3 h-3 rounded-full bg-blue-500"></span>
                <span>Blue (No Attention Required)</span>
              </button>
              <button type="button" class="px-3 py-1 rounded border border-gray-300 flex items-center gap-1 hover:bg-gray-100" 
                      onclick="setReportFlag('yellow')">
                <span class="w-3 h-3 rounded-full bg-yellow-500"></span>
                <span>Yellow (May Need Attention)</span>
              </button>
              <button type="button" class="px-3 py-1 rounded border border-gray-300 flex items-center gap-1 hover:bg-gray-100" 
                      onclick="setReportFlag('red')">
                <span class="w-3 h-3 rounded-full bg-red-500"></span>
                <span>Red (Needs Immediate Attention)</span>
              </button>
            </div>
            <input type="hidden" id="selectedFlag" name="flag" value="">
            <p id="currentFlag" class="mt-2 text-sm text-gray-600">Current selection: <span>None</span></p>
          </div>
          
          <div class="mb-4">
            <label class="block text-sm font-medium mb-1">SNCO Remarks</label>
            <textarea id="sncoRemarks" name="sncoRemarks" rows="3" 
                      class="w-full border border-gray-300 rounded px-3 py-2"></textarea>
          </div>
          
          <div class="flex justify-between">
            <button type="button" id="holdReportBtn" 
                    class="px-4 py-2 bg-yellow-600 text-white rounded hover:bg-yellow-700">
              Toggle Hold Status
            </button>
            <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
              Save Changes
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

      <script>

        function toggleFolder(folderName) {
            const allContent = document.querySelectorAll('.folder-content');
            allContent.forEach(el => el.classList.add('hidden'));

            const target = document.getElementById('folder-' + folderName);
            if (target) target.classList.remove('hidden');
        }

        function openRecruitmentForm() {
            document.getElementById('recruitmentFormModal').classList.remove('hidden');
        }

        function closeRecruitmentForm() {
            document.getElementById('recruitmentFormModal').classList.add('hidden');
        }

        function openDivisionForm() {
            document.getElementById('divisionFormModal').classList.remove('hidden');
        }

        function closeDivisionForm() {
            document.getElementById('divisionFormModal').classList.add('hidden');
        }

        function openDivisionBrowser() {
            document.getElementById('divisionBrowserModal').classList.remove('hidden');
            loadDivisionTree();
        }

        function closeDivisionBrowser() {
            document.getElementById('divisionBrowserModal').classList.add('hidden');
        }

        async function loadDivisionTree() {
            const container = document.getElementById('divisionTreeContainer');
            container.innerHTML = '<p class="text-gray-600">Loading...</p>';

            try {
                const res = await fetch('/api/division/tree');
                const data = await res.json();
                container.innerHTML = renderTree(data);
            } catch (err) {
                console.error(err);
                container.innerHTML = '<p class="text-red-600">Failed to load division tree.</p>';
            }
        }

        function renderTree(node) {
            if (!node) return '';
            let html = `<div class="ml-4">
                <details open>
                    <summary class="cursor-pointer font-semibold">${node.name}</summary>
                    <div class="ml-4 text-sm">
                        ${node.assignedUsers?.length ? `
                            <details class="mb-2">
                                <summary class="text-gray-600 cursor-pointer">Personnel</summary>
                                <ul class="list-disc list-inside mt-1 ml-4">
                                    ${node.assignedUsers.map(u => `<li>${u.username} - ${u.role}</li>`).join('')}
                                </ul>
                            </details>
                        ` : ''}
                        ${(node.children || []).map(child => renderTree(child)).join('')}
                    </div>
                </details>
            </div>`;
            return html;
        }

        function openAssignUserModal() {
                document.getElementById('assignUserModal').classList.remove('hidden');
            }
            function closeAssignUserModal() {
                document.getElementById('assignUserModal').classList.add('hidden');
            }

        const allUsers = <%- JSON.stringify(users) %>;

        function filterUsers() {
            const input = document.getElementById('userSearch').value.toLowerCase();
            const results = document.getElementById('userSearchResults');
            results.innerHTML = '';

            if (!input) return;

            const matches = allUsers.filter(u => u.username.toLowerCase().includes(input));

            matches.forEach(user => {
                const div = document.createElement('div');
                div.textContent = user.username;
                div.className = 'px-3 py-2 cursor-pointer hover:bg-gray-100';
                div.onclick = () => {
                    document.getElementById('userSearch').value = user.username;
                    document.getElementById('selectedUserId').value = user._id;
                    results.innerHTML = '';
                };
                results.appendChild(div);
            });
        }

        function validateUserSelection() {
            const userId = document.getElementById('selectedUserId').value;
            if (!userId) {
                alert('Please select a user from the suggestions.');
                return false;
            }
            return true;
        }

        function openForm122SncoModal() {
            document.getElementById('form122SncoModal').classList.remove('hidden');
        }

        function closeForm122SncoModal() {
            document.getElementById('form122SncoModal').classList.add('hidden');
        }

        function openForm122OfficerQueue() {
            document.getElementById('form122OfficerQueueModal').classList.remove('hidden');
        }
        function closeForm122OfficerQueue() {
            document.getElementById('form122OfficerQueueModal').classList.add('hidden');
        }

        function openForm122FieldOfficerModal() {
            document.getElementById('form122FieldOfficerModal').classList.remove('hidden');
            loadForm122ReviewQueue();
        }

        function closeForm122FieldOfficerModal() {
            document.getElementById('form122FieldOfficerModal').classList.add('hidden');
        }

        async function loadForm122ReviewQueue() {
    const container = document.getElementById('fieldOfficerReviewContainer');
    container.innerHTML = '<p class="text-gray-600">Loading...</p>';

    try {
        const res = await fetch('/api/division-removal/field-review');
        const data = await res.json();

        if (!data.length) {
            container.innerHTML = '<p class="text-gray-600 italic">No forms pending final review.</p>';
            return;
        }

        container.innerHTML = data.map(form => `
            <div class="border rounded p-4 mb-4 bg-gray-50">
                <p><strong>Target:</strong> ${form.targetUser?.username || 'Unknown'}</p>
                <p><strong>Division:</strong> ${form.targetDivision?.name || 'Unknown'}</p>
                <p><strong>SNCO:</strong> ${form.sncoSignature?.username || 'Unknown'}</p>
                <p><strong>Reason:</strong> ${form.reason}</p>
                <p><strong>Officer Comments:</strong> ${form.officerComments || 'N/A'}</p>

                <form action="/api/division-removal/field-submit" method="POST" class="mt-3 space-y-2">
                    <input type="hidden" name="formId" value="${form._id}">
                    <label class="block font-medium text-sm">Final Decision</label>
                    <select name="fieldDecision" class="w-full border rounded px-3 py-2">
                        <option value="Approved">Approve Removal</option>
                        <option value="Blocked">Block Removal</option>
                    </select>

                    <label class="block font-medium text-sm">Final Notes (optional)</label>
                    <textarea name="fieldNotes" class="w-full border rounded px-3 py-2"></textarea>

                    <div class="text-right">
                        <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
                            Submit Final Decision
                        </button>
                    </div>
                </form>
            </div>
        `).join('');
    } catch (err) {
        console.error('Failed to load Form 122 review queue:', err);
        container.innerHTML = '<p class="text-red-600">Failed to load forms.</p>';
    }
}

function openTrainingForm150() {
    document.getElementById('form150Modal').classList.remove('hidden');
  }

  function closeTrainingForm150() {
    document.getElementById('form150Modal').classList.add('hidden');
  }

let selectedTrainees = [];

function filterTrainees() {
  const input = document.getElementById('traineeSearch').value.toLowerCase();
  const results = document.getElementById('traineeSearchResults');
  results.innerHTML = '';

  if (!input) return;

  const matches = allUsers.filter(u => u.username.toLowerCase().includes(input) && !selectedTrainees.includes(u.username));

  matches.forEach(user => {
    const div = document.createElement('div');
    div.textContent = user.username;
    div.className = 'px-3 py-2 cursor-pointer hover:bg-gray-100';
    div.onclick = () => addTrainee(user.username);
    results.appendChild(div);
  });
}

function addTrainee(username) {
  selectedTrainees.push(username);
  document.getElementById('selectedTrainees').value = selectedTrainees.join(',');

  const tag = document.createElement('span');
  tag.className = 'bg-blue-100 text-blue-700 px-2 py-1 rounded-full text-sm flex items-center gap-2';
  tag.textContent = username;
  const remove = document.createElement('button');
  remove.type = 'button';
  remove.innerHTML = '&times;';
  remove.className = 'text-red-500 hover:text-red-700';
  remove.onclick = () => removeTrainee(username, tag);
  tag.appendChild(remove);

  document.getElementById('selectedTraineeTags').appendChild(tag);
  document.getElementById('traineeSearch').value = '';
  document.getElementById('traineeSearchResults').innerHTML = '';
}

function removeTrainee(username, tagElement) {
  selectedTrainees = selectedTrainees.filter(u => u !== username);
  document.getElementById('selectedTrainees').value = selectedTrainees.join(',');
  tagElement.remove();
}

function validateTraineeSelection() {
  if (selectedTrainees.length === 0) {
    alert('Please add at least one trainee.');
    return false;
  }
  return true;
}

function toggleOutcomeTraineeFields() {
  const outcome = document.getElementById('outcomeSelect').value;
  document.getElementById('remedialTrainees').classList.toggle('hidden', outcome !== 'Remedial');
  document.getElementById('failedTrainees').classList.toggle('hidden', outcome !== 'Failed');
}

  function openForm150SncoModal() {
  document.getElementById('form150SncoModal').classList.remove('hidden');
  loadForm150SncoQueue();
}

function closeForm150SncoModal() {
  document.getElementById('form150SncoModal').classList.add('hidden');
}

async function loadForm150SncoQueue() {
    const container = document.getElementById('form150SncoQueueContainer');
    container.innerHTML = '<p class="text-gray-600">Loading...</p>';

    try {
        const res = await fetch('/api/training/pending-snco');
        const data = await res.json();

        if (!data.length) {
            container.innerHTML = '<p class="text-gray-600 italic">No training forms pending SNCO review.</p>';
            return;
        }

        // Create cards with properly quoted formId in the onclick handler
        container.innerHTML = data.map(form => `
            <div class="border rounded p-4 mb-4 bg-white shadow-lg cursor-pointer" 
                 onclick="openTrainingForm('${form._id}')">
                <h3 class="text-lg font-semibold text-gray-800 mb-2">${form.trainingEvent || form.eventName || 'Unknown Event'}</h3>
                <p><strong>Trainees:</strong> ${form.trainees && form.trainees.length ? 
                    (typeof form.trainees[0] === 'object' ? 
                        form.trainees.map(t => t.username).join(', ') : 
                        form.trainees.join(', ')
                    ) : 'Unknown'}</p>
                <p><strong>Time:</strong> ${new Date(form.startTime).toLocaleString()} - ${new Date(form.endTime).toLocaleString()}</p>
                <p><strong>Grade:</strong> ${form.overallGrade || form.grade || 'Unknown'}</p>
                <p><strong>Outcome:</strong> ${form.outcome || 'Unknown'}</p>
            </div>
        `).join('');

    } catch (err) {
        console.error('Failed to load SNCO training forms:', err);
        container.innerHTML = '<p class="text-red-600">Error loading forms. Details: ' + err.message + '</p>';
    }
}

// Fixed function to open the training form detail modal
function openTrainingForm(formId) {
    console.log("Opening training form with ID:", formId);
    
    // Show the modal first, then fetch data
    const modal = document.getElementById('form150DetailModal');
    modal.classList.remove('hidden');
    
    // Show loading indicator
    const contentDiv = document.getElementById('form150DetailContent');
    contentDiv.innerHTML = `<div class="p-4 text-center">Loading form data...</div>`;
    
    // Use the new dedicated endpoint
    fetch(`/training/${formId}`)
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.json();
        })
        .then(form => {
            console.log("Form data received:", form);
            
            // Format trainees display
            let traineesDisplay = 'None';
            if (form.trainees && form.trainees.length) {
                if (typeof form.trainees[0] === 'object') {
                    traineesDisplay = form.trainees.map(t => t.username).join(', ');
                } else {
                    traineesDisplay = form.trainees.join(', ');
                }
            }
            
            // Update modal content
            contentDiv.innerHTML = `
                <div class="space-y-4">
                    <div class="bg-gray-50 p-4 rounded-lg">
                        <h3 class="font-bold text-lg mb-2">Training Details</h3>
                        <p><strong>Event Name:</strong> ${form.trainingEvent || form.eventName || 'Not specified'}</p>
                        <p><strong>Start Time:</strong> ${new Date(form.startTime).toLocaleString()}</p>
                        <p><strong>End Time:</strong> ${new Date(form.endTime).toLocaleString()}</p>
                        <p><strong>Duration:</strong> ${Math.round((new Date(form.endTime) - new Date(form.startTime)) / (1000 * 60))} minutes</p>
                        <p><strong>Trainees:</strong> ${traineesDisplay}</p>
                        <p><strong>Grade:</strong> ${form.overallGrade || form.grade || 'Not graded'}</p>
                        <p><strong>Outcome:</strong> ${form.outcome || 'Not specified'}</p>
                        ${form.remedialTrainees?.length ? `<p><strong>Remedial Trainees:</strong> ${typeof form.remedialTrainees[0] === 'object' ? form.remedialTrainees.map(t => t.username).join(', ') : form.remedialTrainees.join(', ')}</p>` : ''}
                        ${form.failedTrainees?.length ? `<p><strong>Failed Trainees:</strong> ${typeof form.failedTrainees[0] === 'object' ? form.failedTrainees.map(t => t.username).join(', ') : form.failedTrainees.join(', ')}</p>` : ''}
                    </div>

                    <form action="/api/training/snco-submit" method="POST" class="space-y-4 bg-white p-4 rounded-lg border">
                        <input type="hidden" name="formId" value="${form._id}">
                        
                        <div>
                            <label class="block text-sm font-medium mb-1">Recommended XP</label>
                            <input type="number" name="recommendedXP" class="w-full border rounded px-3 py-2" required min="0">
                            <p class="text-xs text-gray-500 mt-1">Enter the recommended XP for all trainees</p>
                        </div>

                        <div>
                            <label class="block text-sm font-medium mb-1">SNCO Remarks</label>
                            <textarea name="remarks" class="w-full border rounded px-3 py-2" rows="4" 
                                     placeholder="Enter your assessment of the training event..."></textarea>
                        </div>

                        <div class="text-right">
                            <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
                                Sign and Submit
                            </button>
                        </div>
                    </form>
                </div>
            `;
        })
        .catch(err => {
            console.error('Failed to fetch training form:', err);
            contentDiv.innerHTML = `
                <div class="bg-red-50 p-4 rounded-lg">
                    <h3 class="font-bold text-lg mb-2 text-red-600">Error Loading Form</h3>
                    <p>There was a problem loading the training form data: ${err.message}</p>
                    <button onclick="closeForm150DetailModal()" class="mt-4 px-3 py-1 bg-gray-500 text-white rounded">
                        Close
                    </button>
                </div>
            `;
        });
}

// Add this CSS to ensure the modal is visible when the 'hidden' class is removed
document.addEventListener('DOMContentLoaded', function() {
    const styleEl = document.createElement('style');
    styleEl.textContent = `
        .modal:not(.hidden) {
            display: flex !important;
            z-index: 100 !important;
        }
    `;
    document.head.appendChild(styleEl);
});

// Enhanced function to populate the detail modal
function populateForm150DetailModal(form) {
    console.log("Populating form detail modal with data:", form);
    
    const modalContainer = document.getElementById('form150DetailContent');
    
    // Format trainees display based on whether they're objects or strings
    const traineesDisplay = form.trainees && form.trainees.length ? 
        (typeof form.trainees[0] === 'object' ? 
            form.trainees.map(t => t.username).join(', ') : 
            form.trainees.join(', ')
        ) : 'None';
        
    modalContainer.innerHTML = `
        <div class="space-y-4">
            <div class="bg-gray-50 p-4 rounded-lg">
                <h3 class="font-bold text-lg mb-2">Training Details</h3>
                <p><strong>Event Name:</strong> ${form.eventName || 'Not specified'}</p>
                <p><strong>Start Time:</strong> ${new Date(form.startTime).toLocaleString()}</p>
                <p><strong>End Time:</strong> ${new Date(form.endTime).toLocaleString()}</p>
                <p><strong>Duration:</strong> ${Math.round((new Date(form.endTime) - new Date(form.startTime)) / (1000 * 60))} minutes</p>
                <p><strong>Trainees:</strong> ${traineesDisplay}</p>
                <p><strong>Grade:</strong> ${form.grade || 'Not graded'}</p>
                <p><strong>Outcome:</strong> ${form.outcome || 'Not specified'}</p>
                ${form.remedialTrainees?.length ? `<p><strong>Remedial Trainees:</strong> ${form.remedialTrainees.join(', ')}</p>` : ''}
                ${form.failedTrainees?.length ? `<p><strong>Failed Trainees:</strong> ${form.failedTrainees.join(', ')}</p>` : ''}
            </div>

            <form action="/api/training/snco-submit" method="POST" class="space-y-4 bg-white p-4 rounded-lg border">
                <input type="hidden" name="formId" value="${form._id}">
                
                <div>
                    <label class="block text-sm font-medium mb-1">Recommended XP</label>
                    <input type="number" name="recommendedXP" class="w-full border rounded px-3 py-2" required min="0">
                    <p class="text-xs text-gray-500 mt-1">Enter the recommended XP for all trainees</p>
                </div>

                <div>
                    <label class="block text-sm font-medium mb-1">SNCO Remarks</label>
                    <textarea name="remarks" class="w-full border rounded px-3 py-2" rows="4" 
                              placeholder="Enter your assessment of the training event..."></textarea>
                </div>

                <div class="text-right">
                    <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
                        Sign and Submit
                    </button>
                </div>
            </form>
        </div>
    `;
}

function closeForm150DetailModal() {
    document.getElementById('form150DetailModal').classList.add('hidden');
}

  function closeForm150SncoModal() {
    document.getElementById('form150SncoModal').classList.add('hidden');
  }

function openForm150OfficerModal() {
  document.getElementById('form150OfficerModal').classList.remove('hidden');
  loadForm150OfficerQueue();
}

function closeForm150OfficerModal() {
  document.getElementById('form150OfficerModal').classList.add('hidden');
}

async function loadForm150OfficerQueue() {
  const container = document.getElementById('form150OfficerQueueContainer');
  container.innerHTML = '<p class="text-gray-600">Loading...</p>';

  try {
    const res = await fetch('/api/training/pending-officer');
    const data = await res.json();

    if (!data.length) {
      container.innerHTML = '<p class="text-gray-600 italic">No forms pending officer approval.</p>';
      return;
    }

    container.innerHTML = data.map(form => `
      <div class="border rounded p-4 mb-6 bg-gray-50">
        <div class="grid grid-cols-2 gap-4 mb-4">
          <div>
            <p><strong>Event:</strong> ${form.trainingEvent || form.eventName || 'Untitled Training'}</p>
            <p><strong>Grade:</strong> ${form.overallGrade || form.grade || 'Not graded'}</p>
            <p><strong>Outcome:</strong> ${form.outcome || 'Not specified'}</p>
            <p><strong>SNCO Signature:</strong> ${form.sncoSignature || 'None'}</p>
          </div>
          <div>
            <p><strong>Start:</strong> ${new Date(form.startTime).toLocaleString()}</p>
            <p><strong>End:</strong> ${new Date(form.endTime).toLocaleString()}</p>
            <p><strong>Recommended XP:</strong> ${form.recommendedXP || form.sncoXPRecommendation || 0}</p>
            <p><strong>NCO Signature:</strong> ${form.ncoSignature || 'None'}</p>
          </div>
        </div>

        <div class="mb-4">
          <p><strong>Trainees:</strong> ${Array.isArray(form.trainees) ? form.trainees.join(', ') : form.trainees || 'None'}</p>
          ${form.remedialTrainees?.length ? `<p><strong>Remedial:</strong> ${form.remedialTrainees.join(', ')}</p>` : ''}
          ${form.failedTrainees?.length ? `<p><strong>Failed:</strong> ${form.failedTrainees.join(', ')}</p>` : ''}
          <p><strong>SNCO Remarks:</strong> ${form.remarks || form.sncoRemarks || 'None'}</p>
        </div>

        <form action="/api/training/officer-submit" method="POST" class="space-y-4 mt-4">
          <input type="hidden" name="formId" value="${form._id}">
          
          <label class="block text-sm font-medium">Assign XP to Trainees</label>
          <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
            ${Array.isArray(form.trainees) ? form.trainees.map(trainee => `
              <div class="border p-3 rounded-md bg-white">
                <label class="block text-sm font-medium text-gray-700">${trainee}</label>
                <div class="mt-1 flex items-center">
                  <input type="number" name="xpAssignments[${trainee}]" 
                         value="${form.recommendedXP || form.sncoXPRecommendation || 0}"
                         class="w-full border rounded px-3 py-2" 
                         placeholder="XP">
                </div>
              </div>
            `).join('') : 'No trainees found'}
          </div>

          <div class="text-right">
            <button type="submit" class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700">Finalize and Approve</button>
          </div>
        </form>
      </div>
    `).join('');
  } catch (err) {
    console.error('Failed to load officer training forms:', err);
    container.innerHTML = '<p class="text-red-600">Error loading forms: ' + err.message + '</p>';
  }
}

async function loadForm150FieldOfficerManager() {
  const container = document.getElementById('form150FieldOfficerContainer');
  container.innerHTML = '<p class="text-gray-600">Loading...</p>';

  // Define the statusColor mapping that was missing
  const statusColor = {
    'Pending SNCO Review': 'border-yellow-500 bg-yellow-50',
    'Pending Officer Approval': 'border-blue-500 bg-blue-50',
    'Completed': 'border-green-500 bg-green-50',
    'HOLD': 'border-red-500 bg-red-50'
  };

  try {
    const res = await fetch('/api/training/all');
    if (!res.ok) {
      throw new Error(`Server returned ${res.status}: ${await res.text()}`);
    }
    
    const forms = await res.json();

    if (!forms || !forms.length) {
      container.innerHTML = '<p class="text-gray-600 italic">No training forms found.</p>';
      return;
    }

    // Group forms by status for better organization
    const groupedForms = {
      'HOLD': [],
      'Completed': [],
      'Pending Officer Approval': [],
      'Pending SNCO Review': []
    };

    forms.forEach(form => {
      const status = form.status || 'Unknown';
      if (!groupedForms[status]) {
        groupedForms[status] = [];
      }
      groupedForms[status].push(form);
    });

    // Generate the HTML for each section
    let html = '';

    // HOLD section first for visibility
    if (groupedForms['HOLD'] && groupedForms['HOLD'].length) {
      html += `<div class="mb-6">
        <h3 class="text-xl font-bold text-red-700 mb-3">Forms on HOLD (${groupedForms['HOLD'].length})</h3>
        <div class="space-y-4">
          ${renderFormGroup(groupedForms['HOLD'])}
        </div>
      </div>`;
    }

    // Then other statuses
    for (const status of ['Pending Officer Approval', 'Pending SNCO Review', 'Completed']) {
      if (groupedForms[status] && groupedForms[status].length) {
        html += `<div class="mb-6">
          <h3 class="text-xl font-bold mb-3">${status} (${groupedForms[status].length})</h3>
          <div class="space-y-4">
            ${renderFormGroup(groupedForms[status])}
          </div>
        </div>`;
      }
    }

    container.innerHTML = html;

    // Add event listeners for the form submissions
    document.querySelectorAll('.hold-form').forEach(form => {
      form.addEventListener('submit', handleHoldFormSubmit);
    });
  } catch (err) {
    console.error('Failed to load training forms:', err);
    container.innerHTML = `<div class="bg-red-50 p-4 rounded border border-red-300">
      <p class="text-red-700 font-medium">Error loading training forms:</p>
      <p class="text-red-600">${err.message}</p>
      <button onclick="loadForm150FieldOfficerManager()" class="mt-3 px-4 py-2 bg-blue-600 text-white rounded">
        Try Again
      </button>
    </div>`;
  }

  // Helper function to render a group of forms
  function renderFormGroup(forms) {
  return forms.map(form => {
    // Handle undefined or null values safely
    const trainingEvent = form.trainingEvent || 'Untitled Training';
    const formId = form._id || '';
    const status = form.status || 'Unknown';
    const statusColorClass = statusColor[status] || 'border-gray-300';
    
    // Parse trainee info safely
    let traineesDisplay = 'None';
    if (form.trainees && form.trainees.length) {
      traineesDisplay = form.trainees.map(t => 
        typeof t === 'object' ? (t.username || 'Unknown') : t
      ).join(', ');
    }

    // Format XP information
    // Check for both finalXP and xpApproved fields
    let xpInfo = 'Not yet assigned';
    
    // First check for finalXP property
    if (form.finalXP && Object.keys(form.finalXP).length > 0) {
      xpInfo = Object.entries(form.finalXP)
        .map(([username, xp]) => `${username}: ${xp} XP`)
        .join(', ');
    } 
    // Then check for xpApproved property
    else if (form.xpApproved && form.xpApproved.length > 0) {
      xpInfo = form.xpApproved.map(entry => {
        let username = 'Unknown';
        if (entry.user) {
          username = typeof entry.user === 'object' ? 
            (entry.user.username || 'Unknown') : entry.user;
        }
        return `${username}: ${entry.xp || 0} XP`;
      }).join(', ');
    }
    // If neither is present, show the recommended XP
    else if (form.sncoXPRecommendation && form.status === 'Pending Officer Approval') {
      xpInfo = `${form.sncoXPRecommendation} XP (recommended)`;
    }

    return `
      <div class="p-4 rounded border ${statusColorClass} shadow">
        <div class="flex justify-between items-center mb-2">
          <h3 class="text-lg font-bold">${trainingEvent}</h3>
          <span class="text-sm font-medium px-2 py-1 rounded ${status === 'HOLD' ? 'bg-red-100 text-red-800' : 'bg-gray-100'}">
            ${status}
          </span>
        </div>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-2 mb-3">
          <div>
            <p><strong>Date:</strong> ${new Date(form.startTime || null).toLocaleDateString()}</p>
            <p><strong>Time:</strong> ${new Date(form.startTime || null).toLocaleTimeString()} - ${new Date(form.endTime || null).toLocaleTimeString()}</p>
            <p><strong>Grade:</strong> ${form.overallGrade || 'N/A'}</p>
            <p><strong>Outcome:</strong> ${form.outcome || 'N/A'}</p>
          </div>
          <div>
            <p><strong>Trainees:</strong> ${traineesDisplay}</p>
            <p><strong>SNCO XP:</strong> ${form.sncoXPRecommendation || 'N/A'}</p>
            <p><strong>SNCO Remarks:</strong> ${form.sncoRemarks || 'None'}</p>
            <p><strong>XP Assigned:</strong> ${xpInfo}</p>
          </div>
        </div>

        ${status === 'HOLD' ? `
          <div class="bg-red-50 p-3 rounded mb-3">
            <p class="text-red-700"><strong>Hold Reason:</strong> ${form.holdReason || 'None provided'}</p>
          </div>
          <form class="hold-form" data-id="${formId}">
            <input type="hidden" name="action" value="lift">
            <button type="submit" class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700">
              Lift HOLD
            </button>
          </form>
        ` : `
          <form class="hold-form" data-id="${formId}">
            <input type="hidden" name="action" value="hold">
            <div class="flex flex-col md:flex-row gap-2">
              <input type="text" name="reason" required placeholder="Reason for HOLD..." 
                     class="flex-grow border rounded px-3 py-2">
              <button type="submit" class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 whitespace-nowrap">
                Place on HOLD
              </button>
            </div>
          </form>
        `}
      </div>
    `;
  }).join('');
}
}

// Function to handle HOLD form submissions
async function handleHoldFormSubmit(event) {
  event.preventDefault();
  const form = event.target;
  const formId = form.dataset.id;
  const action = form.elements.action.value;
  
  try {
    const formData = {};
    if (action === 'hold') {
      formData.reason = form.elements.reason.value;
      if (!formData.reason) {
        alert('Please provide a reason for the hold');
        return;
      }
    }
    
    const res = await fetch(`/api/training/${formId}/hold`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(formData)
    });
    
    if (!res.ok) {
      const errorText = await res.text();
      throw new Error(`Server returned ${res.status}: ${errorText}`);
    }
    
    // Reload the manager view
    loadForm150FieldOfficerManager();
    
    // Show a success message
    const message = action === 'hold' ? 'Form placed on HOLD successfully' : 'HOLD lifted successfully';
    alert(message);
    
  } catch (err) {
    console.error('Error updating HOLD status:', err);
    alert(`Error: ${err.message}`);
  }
}

function openForm150FieldOfficerModal() {
  document.getElementById('form150FieldOfficerModal').classList.remove('hidden');
  loadForm150FieldOfficerManager();
}

function closeForm150FieldOfficerModal() {
  document.getElementById('form150FieldOfficerModal').classList.add('hidden');
}

function initializeForm110UserSearch() {
  const userSearchInput = document.getElementById('userSearchInput');
  const userSuggestions = document.getElementById('userSuggestions');
  const targetUserIdInput = document.getElementById('targetUserId');
  const selectedUserDisplay = document.getElementById('selectedUserDisplay');
  
  // Get all users from our existing variable
  const users = allUsers || []; // Fallback to empty array if allUsers is not defined
  
  userSearchInput.addEventListener('input', function() {
    const searchText = this.value.toLowerCase().trim();
    
    // Clear previous selection if input changes
    if (targetUserIdInput.value && !this.value.includes(selectedUserDisplay.textContent)) {
      targetUserIdInput.value = '';
      selectedUserDisplay.textContent = '';
      selectedUserDisplay.classList.add('hidden');
    }
    
    // Show/hide suggestions based on input
    if (searchText.length < 2) {
      userSuggestions.classList.add('hidden');
      return;
    }
    
    // Filter users based on search text
    const filteredUsers = users.filter(user => 
      user.username.toLowerCase().includes(searchText)
    );
    
    // Generate suggestion HTML
    userSuggestions.innerHTML = '';
    if (filteredUsers.length > 0) {
      filteredUsers.forEach(user => {
        const div = document.createElement('div');
        div.className = 'px-3 py-2 cursor-pointer hover:bg-gray-100';
        div.textContent = user.username;
        div.addEventListener('click', function() {
          // Set selected user
          targetUserIdInput.value = user._id;
          userSearchInput.value = user.username;
          selectedUserDisplay.textContent = `Selected: ${user.username}`;
          selectedUserDisplay.classList.remove('hidden');
          
          // Hide suggestions
          userSuggestions.classList.add('hidden');
        });
        userSuggestions.appendChild(div);
      });
      userSuggestions.classList.remove('hidden');
    } else {
      userSuggestions.classList.add('hidden');
    }
  });
  
  // Hide suggestions when clicking outside
  document.addEventListener('click', function(e) {
    if (!userSearchInput.contains(e.target) && !userSuggestions.contains(e.target)) {
      userSuggestions.classList.add('hidden');
    }
  });
  
  // Handle form submission validation
  const form110Form = document.querySelector('#form110Modal form');
  form110Form.addEventListener('submit', function(e) {
    if (!targetUserIdInput.value) {
      e.preventDefault();
      alert('Please select a user from the suggestions');
      return false;
    }
    
    // You can add other validation here if needed
    return true;
  });
}

// Initialize when modal is opened
function openForm110Modal() {
  document.getElementById('form110Modal').classList.remove('hidden');
  
  // Initialize user search after a short delay to ensure DOM is ready
  setTimeout(initializeForm110UserSearch, 100);
}

function closeForm110Modal() {
  document.getElementById('form110Modal').classList.add('hidden');
}

let currentReportId = null;

// Open the SNCO Performance modal and load the reports
function openSNCOPerformanceModal() {
  document.getElementById('sncoPerformanceModal').classList.remove('hidden');
  loadPerformanceReports();
  
  // Set up event listeners for filtering
  document.getElementById('reportStatusFilter').addEventListener('change', filterReports);
  document.getElementById('reportSearchInput').addEventListener('input', filterReports);
}

// Close the SNCO Performance modal
function closeSNCOPerformanceModal() {
  document.getElementById('sncoPerformanceModal').classList.add('hidden');
}

// Load all performance reports
async function loadPerformanceReports() {
  const tableBody = document.getElementById('performanceReportsList');
  tableBody.innerHTML = '<tr><td colspan="7" class="px-4 py-2 text-center">Loading reports...</td></tr>';
  
  try {
    const response = await fetch('/api/performance/all');
    const data = await response.json();
    
    if (!data.reports || data.reports.length === 0) {
      tableBody.innerHTML = '<tr><td colspan="7" class="px-4 py-2 text-center">No performance reports found.</td></tr>';
      return;
    }
    
    // Store the reports in a global variable for filtering
    window.allPerformanceReports = data.reports;
    
    // Render the reports
    renderReportsList(data.reports);
  } catch (error) {
    console.error('Error loading performance reports:', error);
    tableBody.innerHTML = `<tr><td colspan="7" class="px-4 py-2 text-center text-red-600">
      Error loading reports: ${error.message}</td></tr>`;
  }
}

// Render the reports list
function renderReportsList(reports) {
  const tableBody = document.getElementById('performanceReportsList');
  tableBody.innerHTML = '';
  
  reports.forEach(report => {
    // Format the date
    const date = new Date(report.createdAt).toLocaleDateString();
    
    // Get member and evaluator names
    const memberName = report.targetUser ? 
      (typeof report.targetUser === 'object' ? report.targetUser.username : report.targetUser) : 'Unknown';
    
    const evaluatorName = report.evaluator ? 
      (typeof report.evaluator === 'object' ? report.evaluator.username : report.evaluator) : 
      (report.ncoSignature ? 
        (typeof report.ncoSignature === 'object' ? report.ncoSignature.username : report.ncoSignature) : 
        'Unknown');
    
    // Calculate average score to display
    let calculatedScore = report.calculatedScore;
    if (!calculatedScore && report.dutyPerformance && report.discipline) {
      // Calculate average if not already done
      const grades = [
        report.dutyPerformance.grade,
        report.discipline.grade,
        report.communication.grade,
        report.initiative.grade,
        report.missionContribution.grade,
        report.professionalism.grade
      ].filter(g => g); // Filter out undefined/null
      
      if (grades.length > 0) {
        calculatedScore = grades.reduce((sum, g) => sum + g, 0) / grades.length;
      }
    }
    
    // Determine the flag color for the display
    let flagHtml = '<span class="w-3 h-3 inline-block rounded-full bg-gray-400"></span> None';
    if (report.flag) {
      const flagColors = {
        'red': 'bg-red-500',
        'yellow': 'bg-yellow-500',
        'blue': 'bg-blue-500',
        'green': 'bg-green-500'
      };
      const flagColor = flagColors[report.flag] || 'bg-gray-400';
      flagHtml = `<span class="w-3 h-3 inline-block rounded-full ${flagColor}"></span> ${capitalize(report.flag)}`;
    }
    
    // Create the row
    const row = document.createElement('tr');
    row.className = report.status === 'Hold' ? 'bg-yellow-50' : '';
    row.innerHTML = `
      <td class="px-4 py-2 border">${date}</td>
      <td class="px-4 py-2 border">${memberName}</td>
      <td class="px-4 py-2 border">${evaluatorName}</td>
      <td class="px-4 py-2 border">${calculatedScore ? calculatedScore.toFixed(1) : 'N/A'}</td>
      <td class="px-4 py-2 border">${flagHtml}</td>
      <td class="px-4 py-2 border">${report.status || 'Draft'}</td>
      <td class="px-4 py-2 border">
        <button class="px-2 py-1 bg-blue-600 text-white text-sm rounded hover:bg-blue-700"
                onclick="viewReportDetails('${report._id}')">
          View
        </button>
      </td>
    `;
    tableBody.appendChild(row);
  });
}

// Filter reports based on status and search input
function filterReports() {
  const statusFilter = document.getElementById('reportStatusFilter').value;
  const searchInput = document.getElementById('reportSearchInput').value.toLowerCase();
  
  if (!window.allPerformanceReports) return;
  
  const filteredReports = window.allPerformanceReports.filter(report => {
    // Filter by status
    if (statusFilter !== 'all' && report.status !== statusFilter) {
      return false;
    }
    
    // Filter by search term
    if (searchInput) {
      const memberName = report.targetUser ? 
        (typeof report.targetUser === 'object' ? report.targetUser.username.toLowerCase() : '') : '';
      const evaluatorName = report.evaluator ? 
        (typeof report.evaluator === 'object' ? report.evaluator.username.toLowerCase() : '') : '';
      
      return memberName.includes(searchInput) || evaluatorName.includes(searchInput);
    }
    
    return true;
  });
  
  renderReportsList(filteredReports);
}

// View report details
async function viewReportDetails(reportId) {
  currentReportId = reportId;
  
  const detailView = document.getElementById('reportDetailView');
  detailView.classList.remove('hidden');
  
  // Set loading state
  document.getElementById('reportDetailTitle').textContent = 'Loading report details...';
  
  try {
    // Fetch the report details
    const response = await fetch(`/api/performance/${reportId}`);
    if (!response.ok) {
      throw new Error(`Failed to fetch report: ${response.status} ${response.statusText}`);
    }
    
    const data = await response.json();
    const report = data.report;
    
    if (!report) {
      throw new Error('Report not found');
    }
    
    console.log("Report data:", report); // Log the report for debugging
    
    // Update the title
    document.getElementById('reportDetailTitle').textContent = 'Performance Report Details';
    
    // Fill in the details - Get member name
    const memberName = report.targetUser ? 
      (typeof report.targetUser === 'object' ? report.targetUser.username : report.targetUser) : 'Unknown';
    document.getElementById('detail-member').textContent = memberName;
    
    // Handle evaluator name correctly
    let evaluatorText = 'Unknown';
    if (report.evaluator) {
      if (typeof report.evaluator === 'object' && report.evaluator.username) {
        evaluatorText = report.evaluator.username;
      } else {
        // Try to find the username from allUsers if we have the ID
        const evaluatorId = typeof report.evaluator === 'object' ? report.evaluator._id : report.evaluator;
        const evaluatorUser = allUsers.find(u => u._id === evaluatorId);
        if (evaluatorUser) {
          evaluatorText = evaluatorUser.username;
        } else {
          evaluatorText = `ID: ${evaluatorId}`;
        }
      }
    }
    document.getElementById('detail-evaluator').textContent = evaluatorText;
    
    // Period dates
    const startDate = report.periodStart ? new Date(report.periodStart).toLocaleDateString() : 'N/A';
    const endDate = report.periodEnd ? new Date(report.periodEnd).toLocaleDateString() : 'N/A';
    document.getElementById('detail-period').textContent = `${startDate} to ${endDate}`;
    
    // Other details
    document.getElementById('detail-status').textContent = report.status || 'Draft';
    
    // Display score - prefer calculated score, fallback to manual calculation
    let scoreValue = report.calculatedScore || 0;
    
    // If no calculated score, compute from direct properties
    if (!scoreValue && (report.communication || report.discipline || report.teamwork || 
        report.leadershipPotential || report.technicalSkill)) {
      
      let sum = 0;
      let count = 0;
      
      if (report.communication) { sum += Number(report.communication); count++; }
      if (report.discipline) { sum += Number(report.discipline); count++; }
      if (report.teamwork) { sum += Number(report.teamwork); count++; }
      if (report.leadershipPotential) { sum += Number(report.leadershipPotential); count++; }
      if (report.technicalSkill) { sum += Number(report.technicalSkill); count++; }
      
      if (count > 0) {
        scoreValue = sum / count;
      }
    }
    
    // Display the calculated score
    document.getElementById('detail-grade').textContent = 
      scoreValue ? scoreValue.toFixed(1) : (report.overallGrade || 'N/A');
    
    // Other metadata
    document.getElementById('detail-xp').textContent = report.recommendedXP || 'None';
    document.getElementById('detail-flag').textContent = report.flag ? capitalize(report.flag) : 'None';
    document.getElementById('detail-date').textContent = new Date(report.createdAt || new Date()).toLocaleDateString();
    
    // Safely update evaluation scores - check if elements exist first
    if (document.getElementById('detail-communication')) {
      document.getElementById('detail-communication').textContent = report.communication || 'N/A';
    }
    if (document.getElementById('detail-discipline')) {
      document.getElementById('detail-discipline').textContent = report.discipline || 'N/A';
    }
    if (document.getElementById('detail-teamwork')) {
      const element = document.getElementById('detail-teamwork');
      if (element) element.textContent = report.teamwork || 'N/A';
    }
    if (document.getElementById('detail-leadership')) {
      const element = document.getElementById('detail-leadership');
      if (element) element.textContent = report.leadershipPotential || 'N/A';
    }
    if (document.getElementById('detail-technical')) {
      const element = document.getElementById('detail-technical');
      if (element) element.textContent = report.technicalSkill || 'N/A';
    }
    
    // Handle recommendations
    if (document.getElementById('promotion-badge')) {
      document.getElementById('promotion-badge').classList.toggle('hidden', !report.promotionRecommended);
    }
    if (document.getElementById('training-badge')) {
      document.getElementById('training-badge').classList.toggle('hidden', !report.additionalTraining);
    }
    if (document.getElementById('disciplinary-badge')) {
      document.getElementById('disciplinary-badge').classList.toggle('hidden', !report.disciplinaryWatch);
    }
    
    // Text fields - safely update if elements exist
    if (document.getElementById('detail-strengths')) {
      document.getElementById('detail-strengths').textContent = report.strengths || 'None specified';
    }
    if (document.getElementById('detail-weaknesses')) {
      document.getElementById('detail-weaknesses').textContent = report.weaknesses || 'None specified';
    }
    if (document.getElementById('detail-remarks')) {
      document.getElementById('detail-remarks').textContent = report.remarks || 'None provided';
    }
    
    // Update the score bar with the calculated score
    const scoreBar = document.getElementById('score-bar');
    if (scoreBar && scoreValue) {
      // Calculate percentage width (from 1-5 scale to 0-100%)
      const percentage = ((scoreValue - 1) / 4) * 100;
      scoreBar.style.width = `${Math.min(Math.max(percentage, 0), 100)}%`;
      
      // Set color based on score
      if (scoreValue >= 4.5) {
        scoreBar.style.backgroundColor = '#22C55E'; // Green (Excellent)
      } else if (scoreValue >= 3.5) {
        scoreBar.style.backgroundColor = '#3B82F6'; // Blue (Good)
      } else if (scoreValue >= 2.5) {
        scoreBar.style.backgroundColor = '#F59E0B'; // Yellow (Average)
      } else if (scoreValue >= 1.5) {
        scoreBar.style.backgroundColor = '#F97316'; // Orange (Needs Improvement)
      } else {
        scoreBar.style.backgroundColor = '#EF4444'; // Red (Poor)
      }
    }
    
    // Set current values for SNCO form
    document.getElementById('selectedFlag').value = report.flag || '';
    document.getElementById('sncoRemarks').value = report.sncoRemarks || '';
    
    // Update hold button text
    const holdBtn = document.getElementById('holdReportBtn');
    holdBtn.textContent = report.status === 'Hold' ? 'Remove Hold' : 'Place on Hold';
    holdBtn.onclick = () => toggleHoldStatus(reportId);
    
    // Set up the form submission
    const form = document.getElementById('sncoActionForm');
    form.onsubmit = (e) => {
      e.preventDefault();
      saveReportChanges(reportId);
    };
    
    // Scroll to the details view
    detailView.scrollIntoView({ behavior: 'smooth' });
    
  } catch (error) {
    console.error('Error loading report details:', error);
    document.getElementById('reportDetailTitle').textContent = 'Error Loading Report';
    const errorDiv = document.createElement('div');
    errorDiv.className = 'text-red-600 p-4';
    errorDiv.textContent = `Error: ${error.message}`;
    document.getElementById('reportDetailView').appendChild(errorDiv);
  }
}

// Set the flag for a report
function setReportFlag(flag) {
  // Update the hidden input value
  document.getElementById('selectedFlag').value = flag;
  
  // Update the visible text indicator
  const currentFlagSpan = document.querySelector('#currentFlag span');
  if (currentFlagSpan) {
    currentFlagSpan.textContent = flag === 'none' ? 'None' : capitalize(flag);
    
    // Update the color of the text to match the flag
    currentFlagSpan.className = ''; // Reset classes
    if (flag === 'green') currentFlagSpan.className = 'text-green-600 font-medium';
    if (flag === 'blue') currentFlagSpan.className = 'text-blue-600 font-medium';
    if (flag === 'yellow') currentFlagSpan.className = 'text-yellow-600 font-medium';
    if (flag === 'red') currentFlagSpan.className = 'text-red-600 font-medium';
  }
  
  // Give visual feedback by highlighting the selected button
  const buttons = document.querySelectorAll('#sncoActionForm button[onclick^="setReportFlag"]');
  buttons.forEach(btn => {
    // Remove the highlight from all buttons
    btn.classList.remove('bg-gray-200', 'ring-2', 'ring-blue-500', 'font-medium');
  });
  
  // Find and highlight the selected button
  let flagValue = flag;
  if (flag === 'none') flagValue = 'none'; // Handle 'none' case
  
  const selectedButton = document.querySelector(`button[onclick="setReportFlag('${flagValue}')"]`);
  if (selectedButton) {
    selectedButton.classList.add('bg-gray-200', 'font-medium');
  }
  
  console.log('Flag set to:', flag);
}

// Fixed saveReportChanges function
async function saveReportChanges(reportId) {
  try {
    const flag = document.getElementById('selectedFlag').value;
    const sncoRemarks = document.getElementById('sncoRemarks').value;
    
    console.log('Saving changes with flag:', flag, 'and remarks:', sncoRemarks);
    
    const response = await fetch(`/api/performance/${reportId}/update`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        flag,
        sncoRemarks
      })
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Server returned ${response.status}: ${errorText}`);
    }
    
    const data = await response.json();
    
    // Reload the report details and list
    await loadPerformanceReports();
    await viewReportDetails(reportId);
    
    alert('Report updated successfully');
  } catch (error) {
    console.error('Error saving report changes:', error);
    alert(`Error: ${error.message}`);
  }
}

// Toggle the hold status of a report
async function toggleHoldStatus(reportId) {
  try {
    const response = await fetch(`/api/performance/${reportId}/hold`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({})
    });
    
    if (!response.ok) {
      throw new Error(`Server returned ${response.status}: ${await response.text()}`);
    }
    
    // Reload the report details and list
    await loadPerformanceReports();
    await viewReportDetails(reportId);
    
    alert('Hold status updated successfully');
  } catch (error) {
    console.error('Error toggling hold status:', error);
    alert(`Error: ${error.message}`);
  }
}

// Add this helper function at the beginning of your JavaScript
function capitalize(string) {
  if (!string) return '';
  return string.charAt(0).toUpperCase() + string.slice(1);
}
    </script>
</body>
</html>